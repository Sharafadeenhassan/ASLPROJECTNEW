OBJECT Codeunit 104000 UPG.W1
{
  OBJECT-PROPERTIES
  {
    Date=20210729D;
    Time=120000T;
    Version List=UPGTK14.270.00;
  }
  PROPERTIES
  {
    Permissions=TableData "Item Ledger Entry"=m;
    Subtype=Upgrade;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DataUpgradeMgt@1000 : Codeunit "Data Upgrade Mgt.";
      WorkflowInstancessAreRunningErr@1001 : TextConst 'ENU=There is one or more active workflow instances. You must complete all running workflows before proceeding with the upgrade.';
      UnableToUpgradeProductGroupErr@1002 : TextConst '@@@=%1 - item category code, %2 - product group code;ENU=Unable to upgrade Product Group (%1,%2) because of Code duplication. Please make sure that this product group has a unique Code, and retry the upgrade.';
      JobListTxt@1004 : TextConst '@@@={Locked};ENU=Job List';
      JobTaskLinesTxt@1005 : TextConst '@@@={Locked};ENU=Job Task Lines';
      JobPlanningLinesTxt@1006 : TextConst '@@@={Locked};ENU=Job Planning Lines';
      PowerBICustomerListTxt@1015 : TextConst '@@@={Locked};ENU=Power BI Customer List';
      PowerBIVendorListTxt@1014 : TextConst '@@@={Locked};ENU=Power BI Vendor List';
      PowerBIJobsListTxt@1013 : TextConst '@@@={Locked};ENU=Power BI Jobs List';
      PowerBISalesListTxt@1012 : TextConst '@@@={Locked};ENU=Power BI Sales List';
      PowerBIPurchaseListTxt@1011 : TextConst '@@@={Locked};ENU=Power BI Purchase List';
      PowerBIItemPurchasesListTxt@1010 : TextConst '@@@={Locked};ENU=Power BI Item Purchase List';
      PowerBIItemSalesListTxt@1009 : TextConst '@@@={Locked};ENU=Power BI Item Sales List';
      PowerBIGLAmountListTxt@1008 : TextConst '@@@={Locked};ENU=Power BI GL Amount List';
      PowerBIGLBudgetedAmountListTxt@1007 : TextConst '@@@={Locked};ENU=Power BI GL BudgetedAmount';
      PowerBITopCustOverviewTxt@1039 : TextConst '@@@={Locked};ENU=Power BI Top Cust. Overview';
      PowerBISalesHdrCustTxt@1038 : TextConst '@@@={Locked};ENU=Power BI Sales Hdr. Cust.';
      PowerBICustItemLedgEntTxt@1037 : TextConst '@@@={Locked};ENU=Power BI Cust. Item Ledg. Ent.';
      PowerBICustLedgerEntriesTxt@1036 : TextConst '@@@={Locked};ENU=Power BI Cust. Ledger Entries';
      PowerBIVendorLedgerEntriesTxt@1035 : TextConst '@@@={Locked};ENU=Power BI Vendor Ledger Entries';
      PowerBIPurchaseHdrVendorTxt@1040 : TextConst '@@@={Locked};ENU=Power BI Purchase Hdr. Vendor';
      PowerBIVendItemLedgEntTxt@1030 : TextConst '@@@={Locked};ENU=Power BI Vend. Item Ledg. Ent.';
      PowerBIAgedAccPayableTxt@1034 : TextConst '@@@={Locked};ENU=Power BI Aged Acc. Payable';
      PowerBIAgedAccReceivableTxt@1033 : TextConst '@@@={Locked};ENU=Power BI Aged Acc. Receivable';
      PowerBIAgedInventoryChartTxt@1032 : TextConst '@@@={Locked};ENU=Power BI Aged Inventory Chart';
      PowerBIJobActBudgPriceTxt@1031 : TextConst '@@@={Locked};ENU=Power BI Job Act. v. Budg. Price';
      PowerBIJobProfitabilityTxt@1041 : TextConst '@@@={Locked};ENU=Power BI Job Profitability';
      PowerBIJobActBudgCostTxt@1029 : TextConst '@@@={Locked};ENU=Power BI Job Act. v. Budg. Cost';
      PowerBISalesPipelineTxt@1028 : TextConst '@@@={Locked};ENU=Power BI Sales Pipeline';
      PowerBITop5OpportunitiesTxt@1027 : TextConst '@@@={Locked};ENU=Power BI Top 5 Opportunities';
      PowerBIWorkDateCalcTxt@1026 : TextConst '@@@={Locked};ENU=Power BI WorkDate Calc.';
      PowerBIReportLabelsTxt@1043 : TextConst '@@@={Locked};ENU=Power BI Report Labels';
      UnableToUpgradeItemCategoryErr@1003 : TextConst '@@@=%1 - item category code;ENU=Unable to upgrade Item Category %1 because of Code duplication. Please make sure that this Item Category has a unique Code, and retry the upgrade.';
      WebServiceManagement@1023 : Codeunit "Web Service Management";
      ExcelTemplateIncomeStatementTxt@1018 : TextConst 'ENU=ExcelTemplateIncomeStatement';
      ExcelTemplateBalanceSheetTxt@1017 : TextConst 'ENU=ExcelTemplateBalanceSheet';
      ExcelTemplateTrialBalanceTxt@1016 : TextConst 'ENU=ExcelTemplateTrialBalance';
      ExcelTemplateRetainedEarningsStatementTxt@1020 : TextConst 'ENU=ExcelTemplateRetainedEarnings';
      ExcelTemplateCashFlowStatementTxt@1019 : TextConst 'ENU=ExcelTemplateCashFlowStatement';
      ExcelTemplateAgedAccountsReceivableTxt@1021 : TextConst 'ENU=ExcelTemplateAgedAccountsReceivable';
      ExcelTemplateAgedAccountsPayableTxt@1022 : TextConst 'ENU=ExcelTemplateAgedAccountsPayable';
      ExcelTemplateCompanyInformationTxt@1025 : TextConst 'ENU=ExcelTemplateViewCompanyInformation';
      ODataUtility@1024 : Codeunit ODataUtility;
      PowerBIChartOfAccountsTxt@1042 : TextConst 'ENU=Chart of Accounts';

    [CheckPrecondition]
    [LineStart(454621)]
    PROCEDURE CheckPreconditions@1002();
    VAR
      WorkflowStepInstance@1000 : Record "Workflow Step Instance";
    BEGIN
      if not WorkflowStepInstance.IsEmpty then
        Error(WorkflowInstancessAreRunningErr);
    END;

    [TableSyncSetup]
    [LineStart(454625)]
    PROCEDURE GetTableSyncSetupW1@1003(VAR TableSynchSetup@1000 : Record "Table Synch. Setup");
    BEGIN
      // The purpose of this method is to define how old and new tables will be available for dataupgrade

      // The method is called at a point in time where schema changes have not yet been synchronized to
      // the database so tables except virtual tables cannot be accessed

      // TableSynchSetup."Table ID":
      // Id of the table with schema changes (i.e the modified table).

      // TableSynchSetup."Upgrade Table ID":
      // Id of table where old data will be available in case the selected TableSynchSetup.Mode option is one of Copy or Move , otherwise 0

      // TableSynchSetup.Mode:
      // An option indicating how the data will be handled during synchronization
      // Check: Synchronize without saving data in the upgrade table, fails if there is data in the modified field/table
      // Copy: Synchronize with saving data in the upgrade table, the modified table contains data in matching fields
      // Move: Synchronize with moving the data in the upgrade table,the changed table is empty; the upgrade logic is handled only by application code
      // Force: Synchronize without saving data in the upgrade table, disregard if there is data in the modified field/table

      // Ship Test Automation
      DataUpgradeMgt.SetTableSyncSetup(130400,0,TableSynchSetup.Mode::Force); // CAL Test Suite
      DataUpgradeMgt.SetTableSyncSetup(130401,0,TableSynchSetup.Mode::Force); // CAL Test Line
      DataUpgradeMgt.SetTableSyncSetup(130402,0,TableSynchSetup.Mode::Force); // CAL Test Codeunit
      DataUpgradeMgt.SetTableSyncSetup(130403,0,TableSynchSetup.Mode::Force); // CAL Test Enabled Codeunit
      DataUpgradeMgt.SetTableSyncSetup(130404,0,TableSynchSetup.Mode::Force); // CAL Test Method
      DataUpgradeMgt.SetTableSyncSetup(130405,0,TableSynchSetup.Mode::Force); // CAL Test Result
      DataUpgradeMgt.SetTableSyncSetup(130406,0,TableSynchSetup.Mode::Force); // CAL Test Coverage Map

      DataUpgradeMgt.SetTableSyncSetup(470,0,TableSynchSetup.Mode::Force); // Job Queue
      DataUpgradeMgt.SetTableSyncSetup(472,0,TableSynchSetup.Mode::Force); // Job Queue Entry
      DataUpgradeMgt.SetTableSyncSetup(474,0,TableSynchSetup.Mode::Force); // Job Queue Log Entry
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Approval Comment Line",DATABASE::"UPG Approval Comment Line",
        TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Document Sending Profile",DATABASE::"UPG Document Sending Profile",
        TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(5371,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(5372,0,TableSynchSetup.Mode::Force);

      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"XML Structure",0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Table Permission Buffer",DATABASE::"Table Permission Buffer",TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Payment Method",DATABASE::"Payment Method",TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Sales Header",DATABASE::"Sales Header",TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(824,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(825,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(826,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(827,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(828,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(829,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(830,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Sales Invoice Header",DATABASE::"UPG Sales Invoice Header",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Sales Cr.Memo Header",DATABASE::"UPG Sales Cr.Memo Header",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Purch. Inv. Header",DATABASE::"UPG Purch. Inv. Header",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Purch. Cr. Memo Hdr.",DATABASE::"UPG Purch. Cr. Memo Hdr.",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::Item,DATABASE::"UPG Item",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Item Category",DATABASE::"UPG Item Category",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Nonstock Item",DATABASE::"UPG Nonstock Item",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Ledger Entry Matching Buffer",0,TableSynchSetup.Mode::Check);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Bank Statement Matching Buffer",0,TableSynchSetup.Mode::Check);
      DataUpgradeMgt.SetTableSyncSetup(8640,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"SMTP Mail Setup",DATABASE::"UPG SMTP Mail Setup",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(1305,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(1510,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Notification Setup",0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(1601,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::Job,DATABASE::"UPG Job",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(5079,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(5150,0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Custom Report Layout",DATABASE::"UPG Custom Report Layout",TableSynchSetup.Mode::Move);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Custom Report Selection",DATABASE::"UPG Custom Report Selection",TableSynchSetup.Mode::Copy);
      DataUpgradeMgt.SetTableSyncSetup(
        DATABASE::"Report Layout Selection",DATABASE::"UPG Report Layout Selection",TableSynchSetup.Mode::Copy);

      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"My Customer",0,TableSynchSetup.Mode::Check);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"My Vendor",0,TableSynchSetup.Mode::Check);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"My Item",0,TableSynchSetup.Mode::Check);

      // Manual Setup Add Icon
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Business Setup Icon",0,TableSynchSetup.Mode::Check);

      // Contact Duplicate Search
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Cont. Duplicate Search String",0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Duplicate Search String Setup",0,TableSynchSetup.Mode::Force);

      // CRM Integration Notifications
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"CRM Integration Record",0,TableSynchSetup.Mode::Force);
      // CRM Integration performance
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"CRM Connection Setup",0,TableSynchSetup.Mode::Force);

      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Sales & Receivables Setup",0,TableSynchSetup.Mode::Force);
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Purchases & Payables Setup",0,TableSynchSetup.Mode::Force);

      // Intrastat Contact Setup
      DataUpgradeMgt.SetTableSyncSetup(DATABASE::"Company Information",DATABASE::"UPG Company Information",TableSynchSetup.Mode::Copy);
    END;

    [UpgradePerCompany]
    [LineStart(454729)]
    PROCEDURE UpdateOfficeAdminCredentials@18();
    VAR
      OfficeAdminCredentials@1000 : Record "Office Admin. Credentials";
      ServicePassword@1001 : Record "Service Password";
    BEGIN
      if OfficeAdminCredentials.FindSet then
        repeat
          ServicePassword.Init;
          ServicePassword.SavePassword(OfficeAdminCredentials.Password);
          ServicePassword.Insert(true);
          OfficeAdminCredentials.Password := ServicePassword.Key;
          OfficeAdminCredentials.Modify;
        until OfficeAdminCredentials.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454739)]
    PROCEDURE UpdatePostCodeServiceConfig@19();
    VAR
      PostcodeServiceConfig@1000 : Record "Postcode Service Config";
      ServicePassword@1001 : Record "Service Password";
    BEGIN
      if PostcodeServiceConfig.FindSet then
        repeat
          ServicePassword.Init;
          ServicePassword.SavePassword(PostcodeServiceConfig.ServiceKey);
          ServicePassword.Insert(true);

          PostcodeServiceConfig.ServiceKey := ServicePassword.Key;
          PostcodeServiceConfig.Modify;
        until PostcodeServiceConfig.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454750)]
    PROCEDURE UpdateCRMIntegrationRecordTableID@1112();
    VAR
      CRMIntegrationRecord@1000 : Record "CRM Integration Record";
      IntegrationRecord@1002 : Record "Integration Record";
      RecID@1003 : RecordID;
    BEGIN
      if CRMIntegrationRecord.FindSet then
        repeat
          if IntegrationRecord.Get(CRMIntegrationRecord."Integration ID") then begin
            RecID := IntegrationRecord."Record ID";
            CRMIntegrationRecord."Table ID" := RecID.TableNo;
            CRMIntegrationRecord.Modify;
          end;
        until CRMIntegrationRecord.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454760)]
    PROCEDURE UpdateCompanyInfo@1007();
    VAR
      CompanyInformation@1000 : Record "Company Information";
    BEGIN
      if StrPos(CompanyName,'CRONUS') = 1 then begin
        CompanyInformation.Get;
        CompanyInformation."Demo Company" := true;
        CompanyInformation.Modify;
      end;
    END;

    [UpgradePerDatabase]
    [LineStart(454767)]
    PROCEDURE UpdateSalesIcons@1008();
    VAR
      UPGSalesDocumentIcons@1000 : Codeunit "UPG Sales Document Icons";
      Type@1001 : Integer;
      TotalIcons@1002 : Integer;
    BEGIN
      TotalIcons := 6;
      for Type := 0 to (TotalIcons - 1) do
        UPGSalesDocumentIcons.InsertIcon(Type);
    END;

    [UpgradePerCompany]
    [LineStart(454772)]
    PROCEDURE UpdateItem@1510();
    BEGIN
      UpdateItemPicture;
      UpdateItemCategoryPostingGroups;
      UpdateMyItem;
      UpgradeProductGroup;
      UpdateBlockedFields;
    END;

    [UpgradePerCompany]
    [LineStart(454779)]
    PROCEDURE UpdateApprovalCommentLine@1001();
    VAR
      ApprovalCommentLine@1000 : Record "Approval Comment Line";
      ApprovalEntry@1001 : Record "Approval Entry";
      UPGApprovalCommentLine@1005 : Record "UPG Approval Comment Line";
    BEGIN
      if UPGApprovalCommentLine.FindSet then
        repeat
          ApprovalEntry.SetRange("Record ID to Approve",UPGApprovalCommentLine."Record ID to Approve");
          if ApprovalEntry.FindFirst then begin
            ApprovalCommentLine.Get(UPGApprovalCommentLine."Entry No.");
            // ApprovalCommentLine.INIT;
            // ApprovalCommentLine.TRANSFERFIELDS(UPGApprovalCommentLine);
            ApprovalCommentLine."Workflow Step Instance ID" := ApprovalEntry."Workflow Step Instance ID";
            ApprovalCommentLine.Modify;
          end;
        until UPGApprovalCommentLine.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454792)]
    PROCEDURE UpdateDocumentSendingProfile@1004();
    VAR
      UPGDocumentSendingProfile@1000 : Record "UPG Document Sending Profile";
      DocumentSendingProfile@1001 : Record "Document Sending Profile";
    BEGIN
      if UPGDocumentSendingProfile.FindSet then
        repeat
          DocumentSendingProfile.Get(UPGDocumentSendingProfile.Code);
          case UPGDocumentSendingProfile.Usage of
            UPGDocumentSendingProfile.Usage::"Service Invoice":
              DocumentSendingProfile.Usage := DocumentSendingProfile.Usage::"Service Invoice";
            UPGDocumentSendingProfile.Usage::"Service Credit Memo":
              DocumentSendingProfile.Usage := DocumentSendingProfile.Usage::"Service Credit Memo";
          end;
          DocumentSendingProfile.Modify;
        until UPGDocumentSendingProfile.Next = 0;
      UPGDocumentSendingProfile.DeleteAll;
    END;

    [LineStart(454806)]
    LOCAL PROCEDURE UpdateItemCategoryPostingGroups@1154();
    VAR
      UPGItemCategory@1001 : Record "UPG Item Category";
      UPGItem@1002 : Record "UPG Item";
      UPGNonstockItem@1003 : Record "UPG Nonstock Item";
      TempItemTemplateCode@1005 : Code[10];
    BEGIN
      if not UPGItemCategory.FindSet then
        exit;

      repeat
        UPGItem.SetRange("Item Category Code",UPGItemCategory.Code);
        UPGNonstockItem.SetRange("Item Category Code",UPGItemCategory.Code);
        if (not UPGItem.IsEmpty) or (not UPGNonstockItem.IsEmpty) then begin
          CreateItemTemplateFromItemCategory(UPGItemCategory,TempItemTemplateCode);
          ModifyNonStockItemTemplateCode(UPGNonstockItem,TempItemTemplateCode);
        end;
      until UPGItemCategory.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454819)]
    PROCEDURE UpdateReportSelections@1042();
    VAR
      ReportSelections@1000 : Record "Report Selections";
    BEGIN
      ReportSelections.ModifyAll("Use for Email Attachment",true);
    END;

    [UpgradePerCompany]
    [LineStart(454822)]
    PROCEDURE UpdateOfficeHostProviderSetup@1005();
    BEGIN
      CODEUNIT.Run(CODEUNIT::"Setup Office Host Provider");
    END;

    [UpgradePerCompany]
    [LineStart(454825)]
    PROCEDURE UpdateAzureADMgtProviderSetup@1066();
    BEGIN
      CODEUNIT.Run(CODEUNIT::"Setup Azure AD Mgt. Provider");
    END;

    [UpgradePerCompany]
    [LineStart(454828)]
    PROCEDURE UpdateSMTPMailSetupEncryptPassword@1340();
    VAR
      SMTPMailSetup@1000 : Record "SMTP Mail Setup";
      UPGSMTPMailSetup@1001 : Record "UPG SMTP Mail Setup";
      ServicePassword@1002 : Record "Service Password";
    BEGIN
      if UPGSMTPMailSetup.FindSet then
        repeat
          ServicePassword.Init;
          ServicePassword.SavePassword(UPGSMTPMailSetup.Password);
          ServicePassword.Insert(true);

          SMTPMailSetup.Get(UPGSMTPMailSetup."Primary Key");
          SMTPMailSetup."Password Key" := ServicePassword.Key;
          SMTPMailSetup.Modify;
        until UPGSMTPMailSetup.Next = 0;
    END;

    [LineStart(454840)]
    LOCAL PROCEDURE UpdateItemPicture@1511();
    VAR
      Item@1000 : Record Item;
      UPGItem@1001 : Record "UPG Item";
    BEGIN
      if not Item.FindSet then
        exit;

      UPGItem.SetAutoCalcFields(Picture);

      repeat
        UPGItem.Get(Item."No.");
        MoveBlobToMediaSet(UPGItem,Item);
      until Item.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454851)]
    PROCEDURE UpdateCustomerPictures@1009();
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if not Customer.FindSet then
        exit;

      Customer.SetAutoCalcFields(Picture);

      repeat
        ConvertBlobToMediaSetCustomer(Customer);
      until Customer.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454861)]
    PROCEDURE UpdateVendorPictures@1021();
    VAR
      Vendor@1000 : Record Vendor;
    BEGIN
      if not Vendor.FindSet then
        exit;

      Vendor.SetAutoCalcFields(Picture);

      repeat
        ConvertBlobToMediaSetVendor(Vendor);
      until Vendor.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454871)]
    PROCEDURE UpdateContactPictures@1022();
    VAR
      Contact@1000 : Record Contact;
    BEGIN
      if not Contact.FindSet then
        exit;

      Contact.SetAutoCalcFields(Picture);

      repeat
        ConvertBlobToMediaSetContact(Contact);
      until Contact.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454881)]
    PROCEDURE UpdateEmployeePictures@1023();
    VAR
      Employee@1000 : Record Employee;
    BEGIN
      if not Employee.FindSet then
        exit;

      Employee.SetAutoCalcFields(Picture);

      repeat
        ConvertBlobToMediaSetEmployee(Employee);
      until Employee.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454891)]
    PROCEDURE UpdateBankAccPictures@1024();
    VAR
      BankAccount@1000 : Record "Bank Account";
    BEGIN
      if not BankAccount.FindSet then
        exit;

      BankAccount.SetAutoCalcFields(Picture);

      repeat
        ConvertBlobToMediaSetBankAcc(BankAccount);
      until BankAccount.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454901)]
    PROCEDURE UpdateMyCustomer@1057();
    VAR
      MyCustomer@1000 : Record "My Customer";
      Customer@1001 : Record Customer;
    BEGIN
      if not MyCustomer.FindSet(true) then
        exit;

      repeat
        if Customer.Get(MyCustomer."Customer No.") then begin
          MyCustomer.Validate(Name,Customer.Name);
          MyCustomer.Validate("Phone No." ,Customer."Phone No.");
          MyCustomer.Modify(true);
        end;
      until MyCustomer.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(454913)]
    PROCEDURE UpdateMyVendor@1075();
    VAR
      MyVendor@1000 : Record "My Vendor";
      Vendor@1001 : Record Vendor;
    BEGIN
      if not MyVendor.FindSet(true) then
        exit;

      repeat
        if Vendor.Get(MyVendor."Vendor No.") then begin
          MyVendor.Validate(Name,Vendor.Name);
          MyVendor.Validate("Phone No." ,Vendor."Phone No.");
          MyVendor.Modify(true);
        end;
      until MyVendor.Next = 0;
    END;

    [UpgradePerDatabase]
    [LineStart(454925)]
    PROCEDURE UpgradePermissionSets@1900();
    VAR
      PermissionSet@1000 : Record "Permission Set";
      PermissionManager@1001 : Codeunit "Permission Manager";
    BEGIN
      PermissionSet.SetRange(Hash,'');
      if PermissionSet.FindSet then
        repeat
          PermissionManager.UpdateHashForPermissionSet(PermissionSet."Role ID");
        until PermissionSet.Next = 0;
    END;

    [LineStart(454932)]
    LOCAL PROCEDURE UpdateMyItem@1072();
    VAR
      MyItem@1000 : Record "My Item";
      Item@1001 : Record Item;
    BEGIN
      if not MyItem.FindSet(true) then
        exit;

      repeat
        if Item.Get(MyItem."Item No.") then begin
          MyItem.Validate(Description,Item.Description);
          MyItem.Validate("Unit Price" ,Item."Unit Price");
          MyItem.Modify(true);
        end;
      until MyItem.Next = 0;
    END;

    [LineStart(454944)]
    LOCAL PROCEDURE UpgradeProductGroup@1049();
    VAR
      ProductGroup@1002 : Record "Product Group";
    BEGIN
      if not ProductGroup.FindSet then
        exit;

      repeat
        CreateItemCategory(ProductGroup);
        SaveWarehouseClassCode(ProductGroup);
      until ProductGroup.Next = 0;
    END;

    [LineStart(454953)]
    LOCAL PROCEDURE MoveBlobToMediaSet@1050(VAR UPGItem@1000 : Record "UPG Item";VAR Item@1001 : Record Item);
    VAR
      PictureInStream@1002 : InStream;
    BEGIN
      if not UPGItem.Picture.HasValue then
        exit;

      UPGItem.Picture.CreateInStream(PictureInStream);
      Clear(Item.Picture);
      Item.Picture.ImportStream(PictureInStream,'');
      Item.Modify;
    END;

    [LineStart(454962)]
    LOCAL PROCEDURE ConvertBlobToMediaSetCustomer@1013(VAR Customer@1000 : Record Customer);
    VAR
      PictureInStream@1002 : InStream;
    BEGIN
      if not Customer.Picture.HasValue then
        exit;

      Customer.Picture.CreateInStream(PictureInStream);
      if not IsNullGuid(Customer.Image.ImportStream(PictureInStream,'')) then begin
        Clear(Customer.Picture);
        Customer.Modify;
      end;
    END;

    [LineStart(454972)]
    LOCAL PROCEDURE ConvertBlobToMediaSetVendor@1016(VAR Vendor@1000 : Record Vendor);
    VAR
      PictureInStream@1002 : InStream;
    BEGIN
      if not Vendor.Picture.HasValue then
        exit;

      Vendor.Picture.CreateInStream(PictureInStream);
      if not IsNullGuid(Vendor.Image.ImportStream(PictureInStream,'')) then begin
        Clear(Vendor.Picture);
        Vendor.Modify;
      end;
    END;

    [LineStart(454982)]
    LOCAL PROCEDURE ConvertBlobToMediaSetContact@1017(VAR Contact@1000 : Record Contact);
    VAR
      PictureInStream@1002 : InStream;
    BEGIN
      if not Contact.Picture.HasValue then
        exit;

      Contact.Picture.CreateInStream(PictureInStream);
      if not IsNullGuid(Contact.Image.ImportStream(PictureInStream,'')) then begin
        Clear(Contact.Picture);
        Contact.Modify;
      end;
    END;

    [LineStart(454992)]
    LOCAL PROCEDURE ConvertBlobToMediaSetEmployee@1018(VAR Employee@1000 : Record Employee);
    VAR
      PictureInStream@1002 : InStream;
    BEGIN
      if not Employee.Picture.HasValue then
        exit;

      Employee.Picture.CreateInStream(PictureInStream);
      if not IsNullGuid(Employee.Image.ImportStream(PictureInStream,'')) then begin
        Clear(Employee.Picture);
        Employee.Modify;
      end;
    END;

    [LineStart(455002)]
    LOCAL PROCEDURE ConvertBlobToMediaSetBankAcc@1019(VAR BankAccount@1000 : Record "Bank Account");
    VAR
      PictureInStream@1002 : InStream;
    BEGIN
      if not BankAccount.Picture.HasValue then
        exit;

      BankAccount.Picture.CreateInStream(PictureInStream);
      if not IsNullGuid(BankAccount.Image.ImportStream(PictureInStream,'')) then begin
        Clear(BankAccount.Picture);
        BankAccount.Modify;
      end;
    END;

    [UpgradePerCompany]
    [LineStart(455012)]
    PROCEDURE UpdateJobQueueEntry@1012();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
      NotificationEntry@1001 : Record "Notification Entry";
      NotificationSchedule@1002 : Record "Notification Schedule";
    BEGIN
      JobQueueEntry.SetRange("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SetRange("Object ID to Run",CODEUNIT::"Notification Entry Dispatcher");
      JobQueueEntry.DeleteAll;

      if NotificationEntry.FindSet then
        repeat
          NotificationSchedule.ScheduleNotification(NotificationEntry);
        until NotificationEntry.Next = 0;
    END;

    [UpgradePerDatabase]
    [LineStart(455022)]
    PROCEDURE UpdateManualSetupIcons@1180();
    VAR
      BusinessSetupIcon@1003 : Record "Business Setup Icon";
      Convert@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      ByteArray@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      MemoryStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      BusinessSetupIcon.Init;
      BusinessSetupIcon."Business Setup Name" := 'Default';
      ByteArray := Convert.FromBase64String(GetManualSetupDefaultIcon);
      MemoryStream := MemoryStream.MemoryStream(ByteArray);
      BusinessSetupIcon.Icon.ImportStream(MemoryStream,'Default');

      if not BusinessSetupIcon.Insert then
        BusinessSetupIcon.Modify;
    END;

    [LineStart(455032)]
    LOCAL PROCEDURE GetManualSetupDefaultIcon@1181() : Text;
    VAR
      IconData@1000 : Text;
    BEGIN
      IconData += 'iVBORw0KGgoAAAANSUhEUgAAAPAAAADwCAYAAAA+VemSAAAACXBIWXMAAAsSAAALEgHS3X78AAAgAElEQVR42u19T2gbaZr3M9kheyhdhg';
      IconData += 'G7DMM2NhI7MHYjsYdxg+WLfZgyS5xDpAFn4YuqSXYPn5SYb3eJ5PTSsLEU5uK0dEuYUl/a0FIO6zBYfZAvliFiDiMTh4ZBwoZhISUvzPfBVF06h/k';
      IconData += 'Olbf8vqXSn5JV0luq5wdNx8a2pKr6vc//3/OjH374n78CAoHwJG7gJUAgkMAIBAIJjEAgkMAIBBIYgUAggREIBBIYgUAggREIJDACgUACIxAIJDAC';
      IconData += 'gQRGIBBIYAQCgQRGIBBIYAQCCYxAIJDACAQCCYxAIJDACAQSGIFAIIERCAQSGIFAAiMQCCQwAoFAAiMQCCQwAoEERiAQSGAEAoEERiAQSGAEAgmMQ';
      IconData += 'CAmhR/jJfAeVLUN799fgqbp0GyeU99rO/o7c3OzIIqzH/89A6I4a/4f4Q38CBd8803UZvMCms1zaDbPQVXb0GpdjOW1g8F5CAQEiEQ+hVBoAUKheS';
      IconData += 'Q2EhjRC43GGTQaZ9BsnkOjcQa6rnP1/gRBgFBoHiKRTyESWYJIZAlvGhLY3xb2+LhuEncQwtKWEQBMEgUCAoRCC45ev9k8B03TzcPj6nsanJ6+G+h';
      IconData += 'vrKwsQySyBKury2ihkcD+IW2lUu3pDtPWLhRaAFGccUzQUbrwjcZbaDYveh4yojgD0egySNL62N8rEhjhGjRNh8PDak/SCoJguqWRyBK3BFDVtukx';
      IconData += 'HB/XuxJaFGcgFttEy4wE9nZMW6lUoVI56uoORyJLnrZYzeY51Gp1qNXedD2cVlaWYWNjHaLRZXwokMD8W9ta7Q0oyj6o6qWvLFO/8IB89o2NdQgEB';
      IconData += 'HxYkMB8EbdUOoBS6aDDrRQEAVZXlyEW2/RNbKiqbSiVDuDw8Mj2esTjm7CxsYbuNRKYX+IGg/MQj2+CJK37+hpVKlU4PKzaZrYlaQ1keQuJjATmh7';
      IconData += 'grK8sQj29indQmXi6XDzpyAsQix+Ob6FojgcdjUexiXLQmg7vXirJvS2RZ3oJ4fBMvEhLYHQuSz7/ocAWRuKMlsijOQCazjR4MEnh07rKifAPl8mv';
      IconData += 'm++HwIsjyXXzQRkDk3d29joNxZWUZdna20a1GAg+PWq0O+fwLxl0WxRlIpR5gXXPEaDTOIJvdY661IAiws7ON1xoJ7Nzq5vMvOty7RGILky0uQ1H2';
      IconData += 'O5KDaI2RwI5i3UzmKWMJgsF5yGS2scd3gm61IAiQyz3BkAUJ3Pv0Lxb3O6yuLG/hxZkASqUDUJR9xhrHYrcglXqAFwcJzLrMu7t7cHJSR6vLoTVOp';
      IconData += '58y7ZnB4DwUCs9871Ijgbu4zLHYLZDluxhzcewdCYIAhULO1wes7wlcq9Vhd3fPdNEEQYCHD+/7vv2RVzQaZ5BOP2Vc6kzmkW/vl68JXCodQKHwEl';
      IconData += '3mKXCp/RoX+5bA2eweUyIKhxchl/sCXWYP5SysZT5JWoNMZhsJ7Dfy+vHGT2tc7LeD2FcEtju1k8n72DzvcVQqVchmnzOhkF8y1L4hsKbpkEw+ZuI';
      IconData += 'mPyc/pg3WZKRfSOwLAiN5/YFm8xySybSvSOyL3Uj5/Ask7wgsXDa7N9DPkqEEsvZlXAiFFqBQyIEgGIRttS4gmXxsal+jBfYgrAkrJK8zz+XwsArl';
      IconData += '8oHZ5NKvrVTTdEgkkubPh8OLEI/fHus0kZ0lLhYLSGAkr39c0XL5wFb3WRAE+PrrfFfxArtecoDxK1JaSTytlYapJbA1M4nkHeyadROfoxEOL0Kh8';
      IconData += 'MyWNLKc6vm7RKFzHAomtVodMpmn5tfT2OzxN1988e9fTmO89uWXvzG/Tibvw+3bG8jQLiiVDuDLL38DlcqRrZa1JBnyr3/6038DAICqXkIgIMAvfv';
      IconData += 'Fz5uf+9V//A/785//HXPc///n/Mt/78OEDtFoXUC6/hmbzHBYX/x4CgYArn+uTT34Gc3MzUKsZAyrff/9HmJubmapOu6lLYjWb57C7u8c8fFjn7R/';
      IconData += 'rWokrijOQTN6HSuVbyGS2YWdnG0RxhnGV6eRQqXTAJAqJ8EGxWIB8PgeStNbxuicnddfIe3X/1yGR2KLCqudjT64hgR08iJnMVaN7OLyIHVYDwDog';
      IconData += 'n80+gXJZYZRHAgGBcT91XTcPSiJOR5OfTnRFIkuQyWxDpfItQ2RRnBlLPCzLW8zrJpNpUNU2Epg37O5e6SkFg/OQy32B7BwAVpcyFJq3/blodBlWV';
      IconData += 'pYZCxqN/iPEYp9bpoPsD81AQGAIO05ljVTqAQSD8+bhk04/RQLzFseRYXxBECCTQf2kQREICObDDXC1K9gODx/eN+us9i7rWk9i0n87GFwY62csFJ';
      IconData += '4xNeJ8/gUSmJe4lx4LfPjwPo4EXsON7kVgUZztWgcWBKFvlpeOk8etbRUIGJpaBOXyazPB5VX8eFriXtoCYLnoem50vyRPPL5p290UiSz19Hrog8F';
      IconData += 'YYD7+QzYSWYJEYsusVe/u7sGrV4pnvTXPE1hRvmHiXhQ7u74FbrUuQNP0ng/1MCJ/NIG7xdnjgCxvQaPxFk5P35nJONoyows9JjQaZ8y2BIx77VGr';
      IconData += '1SGRSH7sTKvaZmCt5ZxebvTw9+utrcW3vq6i7EM6/RQSiaRr12RnZ9uMh09OjJ3GaIHH7DrTzfWJxBbGvV1weGgs3G61LszWUkEQIBJZglBoASKRp';
      IconData += 'Y6ETrN5PvL+ZbrWXC6/BlGchbm5WWg03kKzeW7bAVar1V3poyaxPMmdfPXVS4hGP/OcAfBsK2U+/8K0vtPcrH590rQhFvvc0e+4tQXB2p886Htx07';
      IconData += '1NJh+bB4fbr4UuNPUgWF1nRDfrezXMIQhsucgOkrQGudwTVyyRddzPDtb3eHJSd7XpwupKuxE6oAXucWri1oTeiMVk03Ul8kGapkOzeQ6NxpmZzAH';
      IconData += 'oPqTgxgFMLLEozkAksgTB4ILp0lvft9tDCLQ6qSjOQLmsIIHdAj1lJIozUCwWMHHVBdZpnErl267XqtE4g1BoYeBraZD/ylrNzc1AMLgwcB6CWNVu';
      IconData += 'E0k0qQRBgO+++9bVa5VIJM0atZeMgueSWHTPrSxvIXl7us9VxjXuda0GaaogPc92c8IEpA+6Xy2+3yjhxsa6SWBd16FSqbpa30+lHkAqlTYPD69so';
      IconData += 'LzhNfLSSg/YsNGbbPSep1jsehNZlUoV7t1LQaVy1DMJpaqXkM0+v7aUTSAgMAMIpdKBq9crElky+7x1XXf99XxHYE1jL6os30WW9rS+V8mrYHD+Wi';
      IconData += 'U2ErZYiRsMzoMkrUE4vNiRmDo9fQd37sjXGt2jD51W68L1McCHD++b/y4W9z0xseQZAtMLn8PhRdwROwDpCN6/vxy659cQs3tuIdYtqNV+B8ViATK';
      IconData += 'ZbSgUnsF3330LipJnMsi6btTqh7HEmqZDucxaQevXo4YozjJWnw7XkMAjtL47O1g26uc+08P3um70iyeTjx1ZFbJylUAQBMjnc10zwqHQAhSLBYjF';
      IconData += 'bjGW06k7WqlU4c4dmdEzAwD4y1/cV5ekk1eGQkkbCTxK60vkXRC9LUmh8AwymUeMa3t6+g7u3UsNbFkOD6uM27yzsz2Q55NKPYBweJG5f4NYYVVtQ';
      IconData += 'zL5uMNdF8UZyOdzY2my8JoV9gyBR5WM8RMkaR1evVIYi6jrOhSL+5BIJPs2LdBuuCStOWpppBskdF2HWu1Nz59XlH2IxT7vaKc0JocKYw2ZaCt8fF';
      IconData += 'znWleaewJXKlUm9sV+Z2cgUjj5fI6JT1utC1CUb3q6z/TsrtOMvyjODjxj3GicdUjRhsOLoCj5iZQKaSvMe0aaewJj5nk0iESWoFgsMAJvvWDN+A5';
      IconData += 'jAenD9v37ds/3RiOZvA+FwrOJHtZsLFxFAg+DRuPMtAKk5Q5xPdCkmJsbLJdAJ8ScHhrDgAcVUVGcNeN4Vb3klsRcE5i+aNjvPBrQlrWXVaRhpxU9';
      IconData += '6AE8DHiRuYnHb5v/prvakMADQNN0ZnY1Gv0M2XdN4iaTj23XnvSz1MOSkT4seuk/W//2MCUvNxCNLpvex+npOy5LStwSmM5arq4uY8/zNQ5CRdkHW';
      IconData += 'U4xGV5RnGEsjBWBgMC4zv2yyHavSxOzlzsdCi10xOZOS15ugU7e0d1tSOA+wNLRKA5BQ0rHanVjsVtQLBb6loXoh7dcfu3ICtPLtgGM4YReh4Usb9';
      IconData += 'l2cg1a8nILGxtrtiEdErhnzNVmkldYOnJudZPJx5DJPGXiV1KaSaUeDOTRxOObTCPIoDt/aY1ucmAM8nqkkyuZZLWnW60LSKXSE9FxFsVZ81BR1Uv';
      IconData += 'u1rJwSeDj4zoThyCGiXmvariCIAxVmgkEBKZtVVUvQZa7u7Wkk4rW6DbGC52V/+LxTfj66zyzBQLA6OmetBvNmxXmcqCfHq5WlDxa4CFAa4ZdV2mD';
      IconData += '/ls0SGPN+/eX0Gqdd2SrBUGAQiE39P2zrivN53MTKSXSumK8KXZwZ4HpDiB0n4cHXUs9PX13LdcvlXoAmcyjju+fnr6Dcvn1R90qlrzB4Py1yGvE3';
      IconData += 'QeMJZ9UHwDPbjR3BKazneg+X++howcKrjuKJ0nrUC7/1nZNKPu6M2b/8nXIq2k6E0pNug+AdqN5Er7jTlKHvjhY+70eNjbWzdLR8XEdUqnu2xaazf';
      IconData += 'O+hBPFWchktiGVegCNxpmlziswonSDuKWBQKDr+6EnoXjoA1hdXTZj+1rtDTc7p7kjMDl1ifA44npWg8gQkYkgYkkIAYk4na7rIElrA0n0BgICRKP';
      IconData += 'LQ3tItCplMDjPCMyTUVHaY+ChD0AUZ0EUZ0BVL+H09F3f1TO+JHCzeW6eukje0ZGY1IEVZR8OD6u2GxAAwOx8c1Nn2yruTjZG0C44IQov7jNBJLJk';
      IconData += 'XqNG44yLEI+rGHjQzh2EEzd6jXJbL7uSlyYxvbLGTfLau9bsewyHF7kRcKCfSV4SWUjgKYcoznbUU2lyJBJbkM0+YTqgKpUjV2ZgreQ1XPZHIElrX';
      IconData += 'TdG9Gr3nCSB6UVt6EJ/RKt1daph+WiUVngdWq1zc/uBXbIpElkCSfq1+fWgo4ZOEArNM3uIiKtO4nLSP23E5m9BVS+5qkRY42AkMAVN0xnN52mDqr';
      IconData += 'ZNbahhY8xS6QBarXOIxTYdHXCDJJw0TetqbUZnwT7t+eCzyTE+x0eDwQXzOR0kc+8bAtMxxTRZ31qtDoeHVaY3OBr9zLFlUdW2WcaoVI4gGJyHeHx';
      IconData += 'zZCsx6fBFFGf6/s1S6QDm5mbNnyMPcy/iG6ogna/nJYRCC+a9bLWQwLYPkNcJTGRwjWXanf27+fwLiESWHBGPlnc1Hp4LyGafgyC8hI2NNYjHN6+V';
      IconData += '7KEP0H7Wt1KpMv3OBIIgwKtXStfPRd9XXde5sGDDxMHkEGo2z0GSJvt+uEli0cPSXpWNbTTOIJvdA0n69Udl/8sun/Wyp6CcHWG6uZ66rkO5/Bpis';
      IconData += 'c8hmXw8dLP9oAlETdPhq69edn0vvSaGAgHBIqx37rl7TB84PGSiuSEwLe/ipQy0oRxShUQiCalUukOMnMT0JNtKUC6/HugBsBImGJyHfD5nm1k+PX';
      IconData += '0H2exz+NWvfv2xgaM98Gega7G9rr91zrfzsDnq6R4PqlTJKwIBwRx1HFZqaCpdaGJhhhVQmwRx8/kXXTf1CYIAq6vLIMtbpkcRjX7G/Hw+/6LvlFA';
      IconData += '+/4L5+5nMthlrqmobDg+POlx1MghfLO7DyorxHnq5qtaD5P37S1svqNE4Y2J5stFeVdtw716K+VzFYsH2mvV6Xe9Y4fmPEjuTJzB3wwzeIbBmu6lP';
      IconData += 'FGcgk3kEr14pkMlsM0QIBARmgdbp6bue9dZG44yx6LHYLYaIojgLsrwF5bICmcwj2+y93aRQL/cZACCVSkMsJkOlUjVJp2k60+AhCFezwuR90PE5P';
      IconData += 'TOsqm3IZvfgzh2ZGUtstS64Fk3vBrrENmkvggsL7MUEFl0TJG6yLN/t6/5L0jrTzqgo+7CxsW6b+KHjyX6D8ZK0DpK0Dqrahq++eslYyn7vibiF9G';
      IconData += 'FE1oQKwkuzF9na3ki/53h8EyqVqumKl0oHEAgIUKu96Rq/B4PzoGma5/TOeMrRcGeBe6kX8gaaGIFAYODYnVa50HW9I8NMiE3HpYPK4IjiLHMIBoP';
      IconData += 'zfX8vHt+E7777FjKZRx0dUcZy7SPGcobDi7bTOHR9W9d1KBRe2pJXktZAUfJQLBY8mbCcm5vhJgzgzgLTF4d3BIMLAHDk2JUSxdmPM7P7pptbqVSZ';
      IconData += 'h5l2rVdWnE3+0G1+TjwaYsUN171qm5CzHkBsbLjAfC5raCFJ6xCPb3peYZS+T5MOAX7M88XxkgXWdf3jWs/B3r8sbzHJJ+sOXjrWpOPmQUDrYQ2T0';
      IconData += 'SftlrK8BaXSARweXsX6icRWz89IXGk6tIjHb0+tOIO1g833BPYS7MTPJWnwA8gYjk/3JbqTQ40eyRyWwPRhmko9AFm+C7XaGzg+rvcd7QsEBMhkts';
      IconData += '2h92lcBctTLZiLGJi+CF5yoYmFsQsFBrV03SaFSPzqVPmBfg+CIIyEQIGAAJK0PvB+3khkCVKpB1O7x5mnEIALC0y7IV676XSD/jCn8aiXVtPdTTi';
      IconData += 'SOf24gZdgdHEwD3VNnKlGAiOuGQdPCqraZmq1OFPtHnhpp0QCWwhQq9UdWVFrg/4kkxp09nkYC2xVmkT0OrjnuSAwZqEplEoHZsNCMDhv9hzTaolW';
      IconData += '0N1HBgnewqSG0a0yL9nsXlfxAFVtM8qU5DMMqkyJ4ANIYAr0+kiilkjvKKblTw2FwmpH/bbXFj63EY1+xtRsaZVJWkLWbg3K1YF05Lh0hUACTxyVS';
      IconData += 'rXnmJyu63ByUoeTk7o50G2FMTI4OQJHIktQKOQY8bhK5ahrR1Wvg4wXKVcExsADPrRXg/BErXFlZZlZc9kL2eyTiZL3KjZbgEIhN/D7pj8rfZghBs';
      IconData += 's3THp6Di0wGIknuul+Y2OdIeNVnGj83+p+ZjKPuGoVJCS2yriSMIAOBeiYmEwwqeol1Gp13E3VA+S6IoE5gHULntWShkILTElGVdvQbF5Ao/EWQqE';
      IconData += 'FLixvNxKXywd9E3HG5zaWoZGDrFT6LyQwxsCDgR4hdDIQMApYt+ANQkZjFniW+wc8FFpwlFGOx2+bBDYUJ9qYzEICD/agEfetm5yLm7Ev7WbSq0jG';
      IconData += 'cXjQQuZ2Vr+f5RwlotFlRqSgVDqAVOoBssTmviGBOXSfV1aWx0IWVW2Douz3zA7TMfnKyjLE45tjaY2kl6EdHh4hgbvkTOiDdpLgLgs9qJLiKGBNS';
      IconData += 'I1j56ui7EMs9rmj0s7JSR1SqTSk009dP/1pD8RQ48CM9KDhn28tMC2W/f79+FrTaNULUZxx1cJpmg7J5GOma4sgHF6ESORTy+HytkOO5uSkDolEEr';
      IconData += 'LZJ66d/KI4C5K0Zh4wpdIBl0k6XozMpEcLuXOhx6VwQJdNAABisc2xklcQBIjHN3tIzGyBphlLucmSbuN9X0IymYZCIecaiSVp3SRwq3XhyQ0KboI';
      IconData += '2MuhCw2T2rtJtkyQWdmuSyEreYHAevv4636Hs2OmeCR9j0gIjCq/rOiSTaVfc6WbzvGNrBJ0nQIw3zPNgDDweF9pKHFW9hFQqDdns3kiJYVWXlKQ1';
      IconData += 'x2qMRKbGSmI7NcvreAmKsg+ynOpw3bGUZLXA/GwR4YbARJpmXASOxzehXP5thxh6pXIEd+7II0nekJWitOW9zqSPlcQnJ/WReA2NxhkkEskONclwe';
      IconData += 'BEUJY990R1eCh9tlFwReBJq96I4C4XCM8hkHjG9w7quQzb7HJLJx9dyl0qlA6bGPAr5HENraoay8N8M/bc0TYd0+imkUmnm4BQEAZLJ+1AoPMPY1+';
      IconData += 'aa8dJGyRWBaTdt3DGGJK3Dq1cKY90AjFpsLPY5syZk2DhbktZGJjBHW0TSMTXM4XLnjswk8sj7fPVKGUtJzZvWl6891twQeBKJLLs4M5/PdWwnKBb';
      IconData += '3IRaTHRHFKu86yiy3JK0zHgPdCjoIksnHUCi8ZN6fKM5APp+DTGbb88LrboK3NUDcEJgXrV2jJl2ARGKLIYmqXjqqUVs33o/6ZrNies6uF52kEgQB';
      IconData += 'EgljQRqK4DmzwMZmDiSwaQFJTNFtGdY4IctbHTGrkweczmS7ESvRBwKdFXWKXO4JJqkcgD4s0QJbQJ9o0ySuZu2ymny+YQaZOARo1U+7Va6+J7DXt';
      IconData += '7d7BX/5i44X4ZrxLy+HMhK4z4nbzS12duPfcvUgsnuA28jMIQjMS3mNKwKHQgtm4sha3hgnyDZ6q+KkE7eezuRa9ZpH8zC9HcnDlM0+H3n3mR8IzI';
      IconData += 'uYA3etlKuryxO1wpVK9WMnFtsrHQ4vOlq8Zl09OsqYXtN0JtHnlMDWevcou88w/vU5gekHv1Z7M9YblEw+hmz2eYcQHOlKctKIEQotMMmiUQ4E0O2';
      IconData += 'ZhjX4zNHvk3o3/f7o7jPcztAJutbu9Hr7isD0xanVxuNGkyF7a/nqul1J9BxtpXI0Eo9C03SGwJK0NlTjRSSyBOWyAokEW0I6PX0HspwCRdlHt9ri';
      IconData += 'mdkZGSSwTexIOqFU9dJVa9BonEEsJnc08Y+qKyke32SaQUYRa6bT/znSDi9Z3rId6igW9yGRSI7tEOXdfSYTZW405UwVgTstlztxmaLsdzTxA8BIu';
      IconData += '5KsfcvGMP7joUmcze4xXkIsdmskD1O3oQ5VvYRM5ink8y/QfTY9RL6USLkkMJ3IcssCWC1rOLwI5fJvR96VFI9vMlsPWq0Lx3Emic/pxFowOA+yfH';
      IconData += 'fkB+erVwrzfhGsEeFNXohLAovirOtutHUJWSTyqWuD6zs728yARKt1AbKcgmx2r+dnU9U25PMv4N49dsg+GJyHQuGZK0MHgYDQcW38PJnEs/sMwLG';
      IconData += 'sbDy+adZhy+WDka+8NORqrsTbKpWqaz3BgYAAhcIz2N3dY+rbZPGYKM58FNUzunuazXPmwaHhJnkJSqX/YjwTPytysCOh/In7cbvcjM5GHx/XXcmI';
      IconData += '0gkgsg/ILQQCAuRyTyCZvN+xeExVL+H09B0Ui/tQLO7DyUndlryJxBYUiwVXyauq7Y49Ueg+k2uxhgR2aiEBjBqlGzXhUGiBcW1py+OmZ/HqlVG+G';
      IconData += 'WSoQBCM6+BGfG5vfQ8sr+1fAtdqdaZ5g0dPhOvNDLS8qaLsu/Iw0a76uPYBkey0LG+Zmw817apbi8RZZCnZpFxGv6ty0Ac6r54I1wSORJYgGJyHVu';
      IconData += 'sCVPUSGo2zkT/Q0ehnIAhX6hTj3gdk3Xw4aXdxUnuieAMdSthtrEQX2oGFJLiOgFsva0g/qIeHR33j7UbjDBRlH9JpvmuklUoVksnHoCj7ppUf1H0';
      IconData += 'e154oXkHroPEcRnC/3EyS1uGrrwwLeXr6zpUtAYbE7Gsm3iY3zbpB0E4thMcdwbVanQkNyOqaYHCeWfBNSNpsnjOJMz8nr1S1bYZuZIMGEviaBCPt';
      IconData += 'jm6UlKzLrYnFsj7U3UCIwguJm83zrqLvrdYF85nITihalkcUZ3y93Ju2vqury1yL/N3wCoFJ6aVSOXJlCD0ev02dwJdQqRz1JK81g5zNPudiHM9wm';
      IconData += '9MdipPdrY3xWWnPws+ZZ9r6AgD3emF/88UX//4l7xf15s2b8MMPH+D09My0MKN28T755GdQqVS7xonB4Dysra3CP/1TDP7lX/4XyPJdmJubYWrHtV';
      IconData += 'odNE2DX/7yHyZG3mz2OXz48IEi4xoUCs8gHt+EX/zi5/B3f/czAPhrzw0YudwTuHnzpi8JnM+/NA9uSVrj/jDzzILveHzT3HRwevrOlYw0WW4tCAI';
      IconData += 'TJ3Z7HXJzaeWOSc7SWl9bktbMcCMQECAaXf7oGm+ZP99onEGjcQat1jmo6uXQ44lofSeDH/3ww//81UuxCYmFw+FFKBSejfTva5oO79+3HSfJEomk';
      IconData += 'eWonElsTu/G1Wh0ymafU179z/ACTnIAfkU4/NVtdJ3kfpy4Gpk9EWjt61DFnICA4Jq+m6UysPMlhb+trOxUQEMVZ35K30Tgzyct75tmzBLa6NTyoR';
      IconData += 'lhJMkkC0+L4wxDYz6Dr+d2XriOBRxKn0qtIrfpQk4w7rTuVBrXgdkQjE0nXscK8ydnyilLpgBkZ9NKmih978YKnUg9AllMAYEi/RKPLE2tHpEkyjP';
      IconData += 'W1jhiyLu2M4+mjSGTJTMS4IWc7bVDVNlP3HXWPAVpgG4RCCxCL3TK/zmb3JvZe6PqpU7X+Wq3eU/96GA/DTTnbacTu7p5ZM19ZWfbcgrcbXr3wsnz';
      IconData += 'XjPdarYuhd/iOMv4NhQZ3oTVNH6iPuljcd0RCUZxl5o0xDu7tOpMDWBAE2NnZ9txn8CyByT7fYR/0Uce/hqrG4BlcRfmGaabI53NQq/0OarXfQbn8';
      IconData += 'W4aETgcmrrN61K+u88OH9z1Z/77h5ZsQiSx1uNLjzEqzy66WHBGfDE8AGA0X9O+L4ixTxjg9fefIlcYlcc5dZ6+2j97w+o2wutLjHO+jydFonA1cl';
      IconData += '6ZjdkEQbOePZXmLyWoPWjKr1eqMeomqXqJAe4f3s+9513lqCBwICJDNXi3iNoTi3B8qUNW2ZcvfJWSzz+FXv/o15PMvupaAFGWfafyQ5a2urhtNbF';
      IconData += '3Xu04YkW0NsZgMmczTjpFHtMLstaCF/Hd2tj3dOuqJYYZ++OlPfwKBgAC///0fAADgD384g1/+8h/gpz/9iYuv+iO4efMmqGqbsXAfPnyA77//I5T';
      IconData += 'Lr6HZPIe//dub8MknPzNJv7t7NWwQDi/Cv/3b/+76CnNzs6BpGnz//R8BAOBPf/pviESWYG5ulnkYv/zyN/D73/+hw9IKggC3b0sfR+ICvievpunw';
      IconData += 'z//8f8zrH4vd8rxskKd6ofuB7mUdh/zqldWvwuFh1XbY34hpDUkWqyCAouT71q81TYc7d2TT2pNGA7r5wIpgcB7i8U2IRj/z7WCC3XVMJh+b1ywYn';
      IconData += 'IdiseD5zzVVBNY0HRKJJKMkOOqBh35udal0AIeHR4x7bQcnzfLWIYVuIONvXqtljgPZ7B6jsvH11/mp6PueKgIDGBleeqCdHqkb50FSq73paiWH6b';
      IconData += 'BKJh/bWnhi3b3Uvztu0FNsg3o+SOAJwmqxksn7E4t1SHaanjPN59Jb2MYAAAQASURBVHOOraSqtuHevRRT+tjYWPe19M2g4Q09r53JPJoqxZGpJDC';
      IconData += 'PN07TdDg8rIKqtoeWrS2VDkBV2xCPb/paMXLYgzwWuzVWyWAk8Ajjnmk8fRF8h1JIYCQxYgTknZaMsx1uTPvNzGS2zR1LBqH5UI9EjI+846xEIIFd';
      IconData += 'QCr1gGlLRBL7i7zTnJ33BYHJfl4k8fTCqoftB/L6IgamQWZw6Zh4kiUmxOjIS1cc/EJe3xH4yvqyia1pzVD6AdYmjXB4EXK5L3zT1OJLAtuR2G83f';
      IconData += 'hq9KT8exL4lMIDRGFEovGRcr0xme2ra7KYVqtqGdPop06Y6jU0aSOABUKvVGXUGQRDg4cP7WCvmFI3GGaTTT5lhET/X9n1PYACj/JDJPGU0qmKxWy';
      IconData += 'DLd9Gl5jjeFQQBCoWcrz0mJDAVU1k1mtGl5tdl9lOmGQl8jVMewDuLrqY1T6Eo+4zL7Nd4Fwl8DZcarfH4re7u7h4zAy0IAuRyT1CwAAk8mEutKN8';
      IconData += 'w8q/EGuPwvPteENkFTbCysux5ATok8ARQq9U/qkxeWWNRnIFU6gEO048YjcYZZLN7zLUmsq94rZHAI7fG4fAiyPJddOlccJcBjMaMVOoBWl0k8Ohi';
      IconData += '43z+he2DZiwfR5UMp8RVlH2mm4p4OJnMNh6MSGB3UKlUQVH2GVcPiXx94gqCALK8hcMlSODxuNWl0kFHsgXASLjE45toQWw8mHL5wJa48fgmJgeRw';
      IconData += 'HwRmQis+70ts5fwPca5SGDuiSwIAqyuLkMstumbOnIvkXticTc21jDcQALzR+Ra7Y1tjAxgJGhisU1YXV2euodXVdtwfFyHSqXaVdA+FtuEjY11tL';
      IconData += 'hIYP5hJ+pudbEjkSWQpHXPWuZm89xcadptVxOK0COBPW+VDw+rXS0TcSsjkSXzP14JraptaDTOoNE4g+PjetcdUNPsaSCBfYx+biZN6FBoHiKRTyE';
      IconData += 'UWgBRnBk7qVW1Dc3mBTSb59BovIVm86Ln0jZRnIFodNnTHgUSGOGYzMSi9dtoSNzuQECASORTAACzVBUICI5J02yemzuFyRJw43ta11Wpdu5xJLKE';
      IconData += 'lhYJjCBENizeYIQeJ2ivgLj6CCQwYgAXttk8B1Vt93S7Rwna0odCCxAKzaOFRQIjRkXs9+8vQdN0aDbPqe+1Hf2dublZk5RzczMgirPm/xFIYAQC4';
      IconData += 'TJu4CVAIJDACAQCCYxAIJDACAQSGIFAIIERCAQSGIFAIIERCCQwAoFAAiMQCCQwAoEERiAQSGAEAoEERiAQSGAEAgmMQCCQwAgEAgmMQCCQwAgEEh';
      IconData += 'iBQCCBEQgEEhiBQAIjEAgkMAKBQAIjEAgkMAKBBEYgEEhgBAKBBEYgEEhgBAIJjEAgJoX/D5PJL0xH01oxAAAAAElFTkSuQmCC';
      exit(IconData);
    END;

    [UpgradePerCompany]
    [LineStart(455145)]
    PROCEDURE UpdateJobOverBudgetValue@1052();
    VAR
      Job@1000 : Record Job;
      UPGJob@1002 : Record "UPG Job";
      JobTask@1001 : Record "Job Task";
      JobLedgerEntry@1006 : Record "Job Ledger Entry";
      JobPlanningLine@1005 : Record "Job Planning Line";
      UsageCost@1004 : Decimal;
      ScheduleCost@1003 : Decimal;
    BEGIN
      if UPGJob.FindSet then
        repeat
          UsageCost := 0;
          ScheduleCost := 0;
          JobTask.SetRange("Job No.",UPGJob."No.");
          if JobTask.FindFirst then begin
            JobLedgerEntry.SetFilter("Job No.",'%1',UPGJob."No.");
            if JobLedgerEntry.FindSet then begin
              repeat
                UsageCost := UsageCost + JobLedgerEntry."Total Cost (LCY)";
              until JobLedgerEntry.Next = 0;
            end;

            JobPlanningLine.SetFilter("Job No.",'%1',UPGJob."No.");
            JobPlanningLine.SetFilter("Schedule Line",'=1');
            if JobPlanningLine.FindSet then begin
              repeat
                ScheduleCost := ScheduleCost + JobPlanningLine."Total Cost (LCY)";
              until JobPlanningLine.Next = 0;
            end;

            if Job.Get(UPGJob."No.") then begin
              if UsageCost > ScheduleCost then
                Job."Over Budget" := true
              else
                Job."Over Budget" := false;
              Job.Modify;
            end;
          end;
        until UPGJob.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(455177)]
    PROCEDURE UpdateSalesInvCrMemoCancellationInfo@1006();
    VAR
      UPGSalesInvoiceHeader@1000 : Record "UPG Sales Invoice Header";
      UPGSalesCrMemoHeader@1001 : Record "UPG Sales Cr.Memo Header";
      CancelledDocument@1002 : Record "Cancelled Document";
    BEGIN
      UPGSalesInvoiceHeader.SetFilter("Canceled By",'<>%1','');
      if UPGSalesInvoiceHeader.FindSet then
        repeat
          if UPGSalesCrMemoHeader.Get(UPGSalesInvoiceHeader."Canceled By") then
            CancelledDocument.InsertSalesInvToCrMemoCancelledDocument(UPGSalesInvoiceHeader."No.",UPGSalesCrMemoHeader."No.");
        until UPGSalesInvoiceHeader.Next = 0;
    END;

    [LineStart(455185)]
    LOCAL PROCEDURE CreateItemCategory@1053(ProductGroup@1000 : Record "Product Group");
    VAR
      UPGItem@1003 : Record "UPG Item";
      ItemCategory@1001 : Record "Item Category";
      Item@1004 : Record Item;
      NewItemCategoryCode@1002 : Code[10];
    BEGIN
      NewItemCategoryCode := GetUniqueItemCategoryCode(ProductGroup);

      ItemCategory.Init;
      ItemCategory.Code := NewItemCategoryCode;
      ItemCategory."Parent Category" := ProductGroup."Item Category Code";
      ItemCategory.Description := ProductGroup.Description;
      ItemCategory.Insert;

      UPGItem.SetRange("Item Category Code",ProductGroup."Item Category Code");
      UPGItem.SetRange("Product Group Code",ProductGroup.Code);
      if UPGItem.FindSet then
        repeat
          Item.Get(UPGItem."No.");
          Item."Item Category Code" := NewItemCategoryCode;
          Item.Modify(true);
          UpdateItemCategoryCodeOnLinesRecords(UPGItem,ItemCategory);
        until UPGItem.Next = 0;
    END;

    [LineStart(455204)]
    LOCAL PROCEDURE SaveWarehouseClassCode@1058(ProductGroup@1000 : Record "Product Group");
    VAR
      Item@1001 : Record Item;
      UPGItem@1002 : Record "UPG Item";
      UPGNonstockItem@1005 : Record "UPG Nonstock Item";
      NonstockItem@1004 : Record "Nonstock Item";
      TempItemTemplateCode@1003 : Code[10];
    BEGIN
      UPGItem.SetRange("Item Category Code",ProductGroup."Item Category Code");
      UPGItem.SetRange("Product Group Code",ProductGroup.Code);
      if UPGItem.FindSet then
        repeat
          Item.Get(UPGItem."No.");
          Item."Warehouse Class Code" := ProductGroup."Warehouse Class Code";
          Item.Modify;
        until UPGItem.Next = 0;

      UPGNonstockItem.SetRange("Product Group Code",ProductGroup.Code);
      UPGNonstockItem.SetRange("Item No.",'');
      if UPGNonstockItem.FindSet then begin
        CreateItemTemplateFromProductGroup(ProductGroup,TempItemTemplateCode);
        repeat
          NonstockItem.Get(UPGNonstockItem."Entry No.");
          NonstockItem.Validate("Item Template Code",TempItemTemplateCode);
          NonstockItem.Modify;
        until UPGNonstockItem.Next = 0;
      end;
    END;

    [UpgradePerCompany]
    [LineStart(455225)]
    PROCEDURE UpdatePurchInvCrMemoCancellationInfo@1011();
    VAR
      UPGPurchInvoiceHeader@1002 : Record "UPG Purch. Inv. Header";
      UPGPurchCrMemoHeader@1001 : Record "UPG Purch. Cr. Memo Hdr.";
      CancelledDocument@1003 : Record "Cancelled Document";
    BEGIN
      UPGPurchInvoiceHeader.SetFilter("Canceled By",'<>%1','');
      if UPGPurchInvoiceHeader.FindSet then
        repeat
          if UPGPurchCrMemoHeader.Get(UPGPurchInvoiceHeader."Canceled By") then
            CancelledDocument.InsertPurchInvToCrMemoCancelledDocument(UPGPurchInvoiceHeader."No.",UPGPurchCrMemoHeader."No.");
        until UPGPurchInvoiceHeader.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(455233)]
    PROCEDURE UpgradeIntrastatJnlLine@51();
    VAR
      IntrastatJnlLine@1000 : Record "Intrastat Jnl. Line";
      UpgradeTags@1002 : Codeunit "Upgrade Tags";
      UpgradeTagMgt@1001 : Codeunit "Upgrade Tag Mgt";
    BEGIN
      if UpgradeTagMgt.HasUpgradeTag(UpgradeTags.GetIntrastatJnlLinePartnerIDUpgradeTag) then
        exit;

      IntrastatJnlLine.SetRange(Type,IntrastatJnlLine.Type::Shipment);
      if IntrastatJnlLine.FindSet then
        repeat
          IntrastatJnlLine."Country/Region of Origin Code" := IntrastatJnlLine.GetCountryOfOriginCode;
          IntrastatJnlLine."Partner VAT ID" := IntrastatJnlLine.GetPartnerID;
          IntrastatJnlLine.Modify;
        until IntrastatJnlLine.Next = 0;

      UpgradeTagMgt.SetUpgradeTag(UpgradeTags.GetIntrastatJnlLinePartnerIDUpgradeTag);
    END;

    [UpgradePerDatabase]
    [LineStart(455247)]
    PROCEDURE UpgradeCustomReportLayout@1041();
    VAR
      UPGCustomReportLayout@1000 : Record "UPG Custom Report Layout";
      CustomReportLayout@1001 : Record "Custom Report Layout";
    BEGIN
      UPGCustomReportLayout.SetAutoCalcFields(Layout,"Custom XML Part");
      if not UPGCustomReportLayout.FindSet then
        exit;

      repeat
        Clear(CustomReportLayout);
        CustomReportLayout.TransferFields(UPGCustomReportLayout,false);
        CustomReportLayout.Code := GetReportLayoutCode(UPGCustomReportLayout.ID);
        CustomReportLayout.Insert(true);
      until UPGCustomReportLayout.Next = 0;
    END;

    [UpgradePerDatabase]
    [LineStart(455259)]
    PROCEDURE UpgradeReportLayoutSelection@1015();
    VAR
      UPGReportLayoutSelection@1000 : Record "UPG Report Layout Selection";
      ReportLayoutSelection@1001 : Record "Report Layout Selection";
    BEGIN
      if not UPGReportLayoutSelection.FindSet then
        exit;

      repeat
        ReportLayoutSelection.Get(UPGReportLayoutSelection."Report ID",UPGReportLayoutSelection."Company Name");
        ReportLayoutSelection."Custom Report Layout Code" := GetReportLayoutCode(UPGReportLayoutSelection."Custom Report Layout ID");
        ReportLayoutSelection.Modify;
      until UPGReportLayoutSelection.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(455269)]
    PROCEDURE UpgradeCustomReportSelection@1028();
    VAR
      UPGCustomReportSelection@1000 : Record "UPG Custom Report Selection";
      CustomReportSelection@1001 : Record "Custom Report Selection";
    BEGIN
      if not UPGCustomReportSelection.FindSet then
        exit;

      repeat
        CustomReportSelection.Get(
          UPGCustomReportSelection."Source Type",UPGCustomReportSelection."Source No.",
          UPGCustomReportSelection.Usage,UPGCustomReportSelection.Sequence);

        CustomReportSelection."Custom Report Layout Code" := GetReportLayoutCode(UPGCustomReportSelection."Custom Report Layout ID");
        CustomReportSelection.Modify;
      until UPGCustomReportSelection.Next = 0;

      CustomReportSelection.ModifyAll("Use for Email Attachment",true);
    END;

    [LineStart(455284)]
    LOCAL PROCEDURE GetReportLayoutCode@1010(ID@1001 : Integer) : Code[20];
    VAR
      UPGCustomReportLayout@1004 : Record "UPG Custom Report Layout";
      DummyCustomReportLayout@1000 : Record "Custom Report Layout";
      NewCode@1003 : Code[20];
      NonPaddedCode@1005 : Code[20];
      PaddingStringLength@1002 : Integer;
    BEGIN
      if ID <= 0 then
        exit('');

      UPGCustomReportLayout.Get(ID);
      NonPaddedCode := StrSubstNo('%1-%2',UPGCustomReportLayout."Report ID",ID);
      PaddingStringLength := MaxStrLen(DummyCustomReportLayout.Code) - StrLen(NonPaddedCode);

      if PaddingStringLength > 0 then
        NewCode := StrSubstNo('%1-%2%3',UPGCustomReportLayout."Report ID",PadStr('',PaddingStringLength,'0'),ID)
      else
        NewCode := NonPaddedCode;

      exit(NewCode);
    END;

    [Normal]
    [LineStart(455299)]
    LOCAL PROCEDURE CreateItemTemplateFromItemCategory@1140(UPGItemCategory@1001 : Record "UPG Item Category";VAR ItemTemplateCode@1000 : Code[10]);
    VAR
      TempItemTemplate@1002 : TEMPORARY Record "Item Template";
    BEGIN
      Clear(TempItemTemplate);
      TempItemTemplate.Validate(Code,GetUniqueItemTemplateCodeFromItemCategory(UPGItemCategory));
      if UPGItemCategory.Description <> '' then
        TempItemTemplate.Validate("Template Name",UPGItemCategory.Description)
      else
        TempItemTemplate.Validate("Template Name",UPGItemCategory.Code);
      TempItemTemplate.Insert(true);
      TempItemTemplate.Validate("Gen. Prod. Posting Group",UPGItemCategory."Def. Gen. Prod. Posting Group");
      TempItemTemplate.Validate("Inventory Posting Group",UPGItemCategory."Def. Inventory Posting Group");
      TempItemTemplate.Validate("VAT Prod. Posting Group",UPGItemCategory."Def. VAT Prod. Posting Group");
      TempItemTemplate.Validate("Costing Method",UPGItemCategory."Def. Costing Method");
      TempItemTemplate.Validate("Tax Group Code",UPGItemCategory."Def. Tax Group Code");
      TempItemTemplate.Modify(true);
      ItemTemplateCode := TempItemTemplate.Code;
    END;

    [Normal]
    [LineStart(455315)]
    LOCAL PROCEDURE CreateItemTemplateFromProductGroup@1251(ProductGroup@1001 : Record "Product Group";VAR ItemTemplateCode@1000 : Code[10]);
    VAR
      UPGItemCategory@1003 : Record "UPG Item Category";
      TempItemTemplate@1002 : TEMPORARY Record "Item Template";
    BEGIN
      Clear(TempItemTemplate);
      TempItemTemplate.Validate(Code,GetUniqueItemTemplateCodeFromProductGroup(ProductGroup));
      if ProductGroup.Description <> '' then
        TempItemTemplate.Validate("Template Name",ProductGroup.Description)
      else
        TempItemTemplate.Validate("Template Name",ProductGroup.Code);
      TempItemTemplate.Insert(true);
      UPGItemCategory.Get(ProductGroup."Item Category Code");
      TempItemTemplate.Validate("Gen. Prod. Posting Group",UPGItemCategory."Def. Gen. Prod. Posting Group");
      TempItemTemplate.Validate("Inventory Posting Group",UPGItemCategory."Def. Inventory Posting Group");
      TempItemTemplate.Validate("VAT Prod. Posting Group",UPGItemCategory."Def. VAT Prod. Posting Group");
      TempItemTemplate.Validate("Costing Method",UPGItemCategory."Def. Costing Method");
      TempItemTemplate.Validate("Tax Group Code",UPGItemCategory."Def. Tax Group Code");
      TempItemTemplate.Validate("Warehouse Class Code",ProductGroup."Warehouse Class Code");
      TempItemTemplate.Modify(true);
      ItemTemplateCode := TempItemTemplate.Code;
    END;

    [Normal]
    [LineStart(455333)]
    LOCAL PROCEDURE GetUniqueItemTemplateCodeFromProductGroup@1127(ProductGroup@1000 : Record "Product Group") : Code[10];
    VAR
      DummyConfigTemplateHeader@1001 : Record "Config. Template Header";
      ItemTemplateCode@1002 : Code[10];
    BEGIN
      ItemTemplateCode := GetUniqueItemTemplateCode(CopyStr(ProductGroup.Code,1,MaxStrLen(DummyConfigTemplateHeader.Code)));
      if ItemTemplateCode = '' then
        Error(UnableToUpgradeProductGroupErr,ProductGroup."Item Category Code",ProductGroup.Code);

      exit(ItemTemplateCode);
    END;

    [Normal]
    [LineStart(455340)]
    LOCAL PROCEDURE GetUniqueItemTemplateCodeFromItemCategory@1129(UPGItemCategory@1000 : Record "UPG Item Category") : Code[10];
    VAR
      DummyConfigTemplateHeader@1002 : Record "Config. Template Header";
      ItemTemplateCode@1001 : Code[10];
    BEGIN
      ItemTemplateCode := GetUniqueItemTemplateCode(CopyStr(UPGItemCategory.Code,1,MaxStrLen(DummyConfigTemplateHeader.Code)));
      if ItemTemplateCode = '' then
        Error(UnableToUpgradeItemCategoryErr,UPGItemCategory.Code);

      exit(ItemTemplateCode);
    END;

    [Normal]
    [LineStart(455347)]
    LOCAL PROCEDURE GetUniqueItemTemplateCode@1120(CandidateCode@1000 : Code[10]) : Code[10];
    VAR
      ConfigTemplateHeader@1001 : Record "Config. Template Header";
    BEGIN
      if not ConfigTemplateHeader.Get(CandidateCode) then
        exit(CandidateCode);

      if StrLen(CandidateCode) < MaxStrLen(CandidateCode) - 2 then
        CandidateCode += '1'
      else
        CandidateCode := CopyStr(CandidateCode,1,StrLen(CandidateCode) - 2) + '1';

      while ConfigTemplateHeader.Get(CandidateCode) do
        if StrLen(IncStr(CandidateCode)) < MaxStrLen(CandidateCode) then
          CandidateCode := IncStr(CandidateCode)
        else
          exit('');

      exit(CandidateCode);
    END;

    [Normal]
    [LineStart(455364)]
    LOCAL PROCEDURE GetUniqueItemCategoryCode@1221(ProductGroup@1000 : Record "Product Group") : Code[10];
    VAR
      ItemCategory@1001 : Record "Item Category";
      CandidateCode@1002 : Code[10];
    BEGIN
      CandidateCode := ProductGroup.Code;
      if not ItemCategory.Get(CandidateCode) then
        exit(CandidateCode);

      if StrLen(CandidateCode) < MaxStrLen(CandidateCode) - 2 then
        CandidateCode += '1'
      else
        CandidateCode := CopyStr(CandidateCode,1,StrLen(CandidateCode) - 2) + '1';

      while ItemCategory.Get(CandidateCode) do
        if StrLen(IncStr(CandidateCode)) < MaxStrLen(CandidateCode) then
          CandidateCode := IncStr(CandidateCode)
        else
          Error(UnableToUpgradeProductGroupErr,ProductGroup."Item Category Code",ProductGroup.Code);

      exit(CandidateCode);
    END;

    [Normal]
    [LineStart(455382)]
    LOCAL PROCEDURE ModifyNonStockItemTemplateCode@1149(UPGNonstockItem@1000 : Record "UPG Nonstock Item";ItemTemplateCode@1001 : Code[10]);
    VAR
      NonstockItem@1002 : Record "Nonstock Item";
    BEGIN
      if UPGNonstockItem.FindSet then
        repeat
          NonstockItem.Get(UPGNonstockItem."Entry No.");
          if NonstockItem."Product Group Code" = '' then begin
            NonstockItem."Item Template Code" := ItemTemplateCode;
            NonstockItem.Modify;
          end;
        until UPGNonstockItem.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(455392)]
    PROCEDURE UpdateDataExchUnitOfMeasureMapping@1151();
    VAR
      PurchaseLine@1001 : Record "Purchase Line";
    BEGIN
      UpdateDataExchColumnDefRecord(
        'OCRINVOICE','OCRINVLINES','InvoiceLineUnitOfMeasure',
        '','/Document/Tables/Table/TableRows/TableRow/ItemFields/ItemField[Type[text()=''LIT_DeliveredQuantityUnitCode'']]/Text');
      UpdateDataExchFieldMappingRecord(
        'OCRINVOICE','OCRINVLINES',
        DATABASE::"Purchase Line",PurchaseLine.FieldNo("Unit of Measure"),
        DATABASE::"Purchase Line",PurchaseLine.FieldNo("Unit of Measure Code"));
      UpdateDataExchFieldMappingRecord(
        'PEPPOLINVOICE','PEPPOLINVLINES',
        DATABASE::"Purchase Line",PurchaseLine.FieldNo("Unit of Measure"),
        DATABASE::"Purchase Line",PurchaseLine.FieldNo("Unit of Measure Code"));
      UpdateDataExchFieldMappingRecord(
        'PEPPOLCREDITMEMO','PEPPOLCRMEMOLINES',
        DATABASE::"Purchase Line",PurchaseLine.FieldNo("Unit of Measure"),
        DATABASE::"Purchase Line",PurchaseLine.FieldNo("Unit of Measure Code"));
    END;

    [UpgradePerCompany]
    [LineStart(455409)]
    PROCEDURE InsertDataExchVendorIdMapping@1300();
    VAR
      Vendor@1001 : Record Vendor;
    BEGIN
      InsertDataExchColumnDefRecord(
        'OCRINVOICE','OCRINVHEADER',18,'Supplier ID','Buy-from Vendor ID',
        '/Document/Parties/Party[Type[text()=''supplier'']]/ExternalId','');
      InsertDataExchColumnDefRecord(
        'OCRCREDITMEMO','OCRCRMEMOHEADER',18,'Supplier ID','Buy-from Vendor ID',
        '/Document/Parties/Party[Type[text()=''supplier'']]/ExternalId','');
      InsertDataExchFieldMappingRecord(
        'OCRINVOICE','OCRINVHEADER',18,
        DATABASE::"Intermediate Data Import",0,DATABASE::Vendor,Vendor.FieldNo(Id),
        '',true);
      InsertDataExchFieldMappingRecord(
        'OCRCREDITMEMO','OCRCRMEMOHEADER',18,
        DATABASE::"Intermediate Data Import",0,DATABASE::Vendor,Vendor.FieldNo(Id),
        '',true);
    END;

    [LineStart(455425)]
    LOCAL PROCEDURE DoesDataExchLineExist@1301(DataExchDefCode@1005 : Code[20];Code@1006 : Code[20]) : Boolean;
    VAR
      DataExchLineDef@1011 : Record "Data Exch. Line Def";
    BEGIN
      DataExchLineDef.SetRange("Data Exch. Def Code",DataExchDefCode);
      DataExchLineDef.SetRange(Code,Code);
      exit(DataExchLineDef.FindFirst);
    END;

    [LineStart(455430)]
    LOCAL PROCEDURE DoesDataExchMappingExist@1302(DataExchDefCode@1005 : Code[20];DataExchLineDefCode@1006 : Code[20]) : Boolean;
    VAR
      DataExchMapping@1000 : Record "Data Exch. Mapping";
    BEGIN
      DataExchMapping.SetRange("Data Exch. Def Code",DataExchDefCode);
      DataExchMapping.SetRange("Data Exch. Line Def Code",DataExchLineDefCode);
      exit(DataExchMapping.FindFirst);
    END;

    [LineStart(455435)]
    LOCAL PROCEDURE InsertDataExchColumnDefRecord@1303(DataExchDefCode@1005 : Code[20];DataExchLineDefCode@1006 : Code[20];ColumnNo@1000 : Integer;Name@1007 : Text[250];Description@1001 : Text[50];Path@1002 : Text[250];Constant@1003 : Text[30]);
    VAR
      DataExchColumnDef@1011 : Record "Data Exch. Column Def";
    BEGIN
      if not DoesDataExchLineExist(DataExchDefCode,DataExchLineDefCode) then
        exit;
      DataExchColumnDef.SetRange("Data Exch. Def Code",DataExchDefCode);
      DataExchColumnDef.SetRange("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchColumnDef.SetRange("Column No.",ColumnNo);
      if DataExchColumnDef.FindFirst then
        exit;
      DataExchColumnDef.Init;
      DataExchColumnDef.Validate("Data Exch. Def Code",DataExchDefCode);
      DataExchColumnDef.Validate("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchColumnDef.Validate("Column No.",ColumnNo);
      DataExchColumnDef.Validate(Name,Name);
      DataExchColumnDef.Validate(Description,Description);
      DataExchColumnDef.Validate(Path,Path);
      DataExchColumnDef.Validate(Constant,Constant);
      DataExchColumnDef.Insert;
    END;

    [LineStart(455453)]
    LOCAL PROCEDURE InsertDataExchFieldMappingRecord@1304(DataExchDefCode@1005 : Code[20];DataExchLineDefCode@1006 : Code[20];ColumnNo@1001 : Integer;TableId@1007 : Integer;FieldId@1008 : Integer;TargetTableId@1003 : Integer;TargetFieldId@1004 : Integer;TransformationRule@1012 : Code[20];Optional@1002 : Boolean);
    VAR
      DataExchFieldMapping@1000 : Record "Data Exch. Field Mapping";
    BEGIN
      if not DoesDataExchMappingExist(DataExchDefCode,DataExchLineDefCode) then
        exit;
      DataExchFieldMapping.SetRange("Data Exch. Def Code",DataExchDefCode);
      DataExchFieldMapping.SetRange("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchFieldMapping.SetRange("Table ID",TableId);
      DataExchFieldMapping.SetRange("Column No.",ColumnNo);
      DataExchFieldMapping.SetRange("Field ID",FieldId);
      if DataExchFieldMapping.FindFirst then
        exit;
      DataExchFieldMapping.Init;
      DataExchFieldMapping.Validate("Data Exch. Def Code",DataExchDefCode);
      DataExchFieldMapping.Validate("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchFieldMapping.Validate("Table ID",TableId);
      DataExchFieldMapping.Validate("Column No.",ColumnNo);
      DataExchFieldMapping.Validate("Field ID",FieldId);
      DataExchFieldMapping.Validate(Optional,Optional);
      DataExchFieldMapping.Validate("Target Table ID",TargetTableId);
      DataExchFieldMapping.Validate("Target Field ID",TargetFieldId);
      DataExchFieldMapping.Validate("Transformation Rule",TransformationRule);
      DataExchFieldMapping.Insert;
    END;

    [LineStart(455475)]
    LOCAL PROCEDURE UpdateDataExchColumnDefRecord@1152(DataExchDefCode@1005 : Code[20];DataExchLineDefCode@1006 : Code[20];ColumnName@1007 : Text[250];NewConstant@1000 : Text[30];NewPath@1009 : Text[250]);
    VAR
      DataExchColumnDef@1011 : Record "Data Exch. Column Def";
    BEGIN
      DataExchColumnDef.SetRange("Data Exch. Def Code",DataExchDefCode);
      DataExchColumnDef.SetRange("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchColumnDef.SetRange(Name,ColumnName);
      if DataExchColumnDef.FindFirst then begin
        DataExchColumnDef.Validate(Constant,NewConstant);
        DataExchColumnDef.Validate(Path,NewPath);
        DataExchColumnDef.Modify;
      end;
    END;

    [LineStart(455485)]
    LOCAL PROCEDURE UpdateDataExchFieldMappingRecord@1153(DataExchDefCode@1005 : Code[20];DataExchLineDefCode@1006 : Code[20];OldTableId@1007 : Integer;OldFieldId@1008 : Integer;NewTableId@1010 : Integer;NewFieldId@1009 : Integer);
    VAR
      DataExchFieldMapping@1000 : Record "Data Exch. Field Mapping";
    BEGIN
      DataExchFieldMapping.SetRange("Data Exch. Def Code",DataExchDefCode);
      DataExchFieldMapping.SetRange("Data Exch. Line Def Code",DataExchLineDefCode);
      DataExchFieldMapping.SetRange("Table ID",OldTableId);
      DataExchFieldMapping.SetRange("Field ID",OldFieldId);
      if DataExchFieldMapping.FindFirst then begin
        DataExchFieldMapping.Validate("Table ID",NewTableId);
        DataExchFieldMapping.Validate("Field ID",NewFieldId);
        DataExchFieldMapping.Modify;
      end;
    END;

    [UpgradePerCompany]
    [LineStart(455496)]
    PROCEDURE UpdateDuplicateSearchStringSetup@1222();
    VAR
      DuplicateSearchStringSetup@1000 : Record "Duplicate Search String Setup";
    BEGIN
      DuplicateSearchStringSetup.DeleteAll;
      DuplicateSearchStringSetup.CreateDefaultSetup;
    END;

    [LineStart(455500)]
    LOCAL PROCEDURE CreateTenantWebServiceColumn@1078(TenantWebServiceRecordId@1002 : RecordID;FieldNumber@1000 : Integer;DataItem@1003 : Integer);
    VAR
      TenantWebServiceColumns@1001 : Record "Tenant Web Service Columns";
      FieldTable@1004 : Record Field;
      ODataUtility@1005 : Codeunit ODataUtility;
      FieldNameConverted@1006 : Text;
    BEGIN
      TenantWebServiceColumns.Init;
      TenantWebServiceColumns."Entry ID" := 0;
      TenantWebServiceColumns."Data Item" := DataItem;
      TenantWebServiceColumns."Field Number" := FieldNumber;
      TenantWebServiceColumns.TenantWebServiceID := TenantWebServiceRecordId;
      TenantWebServiceColumns.Include := true;

      if FieldTable.Get(DataItem,FieldNumber) then
        FieldNameConverted := ODataUtility.ConvertNavFieldNameToOdataName(FieldTable.FieldName);

      TenantWebServiceColumns."Field Name" := CopyStr(FieldNameConverted,1,250);
      if TenantWebServiceColumns.Insert then;
    END;

    [UpgradePerCompany]
    [LineStart(455514)]
    PROCEDURE CreateJobWebServices@1077();
    VAR
      TenantWebService@1000 : Record "Tenant Web Service";
    BEGIN
      TenantWebService.Init;
      TenantWebService."Object Type" := TenantWebService."Object Type"::Page;
      TenantWebService."Object ID" := PAGE::"Job List";
      TenantWebService."Service Name" := CopyStr(JobListTxt,1,MaxStrLen(TenantWebService."Service Name"));
      TenantWebService.Published := true;

      if TenantWebService.Insert then begin
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1,DATABASE::Job);
        CreateTenantWebServiceColumn(TenantWebService.RecordId,3,DATABASE::Job);
        CreateTenantWebServiceColumn(TenantWebService.RecordId,5,DATABASE::Job);
        CreateTenantWebServiceColumn(TenantWebService.RecordId,19,DATABASE::Job);
        CreateTenantWebServiceColumn(TenantWebService.RecordId,20,DATABASE::Job);
        CreateTenantWebServiceColumn(TenantWebService.RecordId,2,DATABASE::Job);
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1036,DATABASE::Job);

        CreateTenantWebServiceOData(TenantWebService);
      end;

      Clear(TenantWebService);

      TenantWebService.Init;
      TenantWebService."Object Type" := TenantWebService."Object Type"::Page;
      TenantWebService."Object ID" := PAGE::"Job Task Lines";
      TenantWebService."Service Name" := CopyStr(JobTaskLinesTxt,1,MaxStrLen(TenantWebService."Service Name"));
      TenantWebService.Published := true;

      if TenantWebService.Insert then begin
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,2,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,3,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,4,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,21,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,7,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,6,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,9,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,66,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,67,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,10,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,11,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,12,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,13,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,14,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,15,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,17,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,16,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,64,DATABASE::"Job Task");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,65,DATABASE::"Job Task");

        CreateTenantWebServiceOData(TenantWebService);
      end;

      Clear(TenantWebService);

      TenantWebService.Init;
      TenantWebService."Object Type" := TenantWebService."Object Type"::Page;
      TenantWebService."Object ID" := PAGE::"Job Planning Lines";
      TenantWebService."Service Name" := CopyStr(JobPlanningLinesTxt,1,MaxStrLen(TenantWebService."Service Name"));
      TenantWebService.Published := true;

      if TenantWebService.Insert then begin
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1000,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,3,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,5794,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,4,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,5,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,7,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,8,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,9,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1060,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1002,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1003,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1004,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1006,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1071,DATABASE::"Job Planning Line");
        CreateTenantWebServiceColumn(TenantWebService.RecordId,1035,DATABASE::"Job Planning Line");

        CreateTenantWebServiceOData(TenantWebService);
      end;

      CreatePowerBICustomerList;
      CreatePowerBIVendorList;
      CreatePowerBIJobList;
      CreatePowerBISalesList;
      CreatePowerBIPurchaseList;
      CreatePowerBIItemPurchaseList;
      CreatePowerBIItemSalesList;
      CreatePowerBIGLAmountList;
      CreatePowerBIGLBudgetedAmountList;
      CreatePowerBITopCustOverviewWebService;
      CreatePowerBISalesHdrCustWebService;
      CreatePowerBICustItemLedgEntWebService;
      CreatePowerBICustLedgerEntriesWebService;
      CreatePowerBIVendorLedgerEntriesWebService;
      CreatePowerBIPurchaseHdrVendorWebService;
      CreatePowerBIVendItemLedgEntWebService;
      CreatePowerBIAgedAccPayableWebService;
      CreatePowerBIAgedAccReceivableWebService;
      CreatePowerBIAgedInventoryChartWebService;
      CreatePowerBIJobActBudgPriceWebService;
      CreatePowerBIJobProfitabilityWebService;
      CreatePowerBIJobActBudgCostWebService;
      CreatePowerBISalesPipelineWebService;
      CreatePowerBITop5OpportunitiesWebService;
      CreatePowerBIWorkDateCalcWebService;
      CreatePowerBIReportLabelsWebService;
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Chart of Accounts",PowerBIChartOfAccountsTxt,true);
    END;

    [LineStart(455623)]
    LOCAL PROCEDURE CreateTenantWebServiceOData@1032(TenantWebService@1000 : Record "Tenant Web Service");
    VAR
      TenantWebServiceOData@1003 : Record "Tenant Web Service OData";
      ODataUtility@1002 : Codeunit ODataUtility;
      SelectText@1001 : Text;
    BEGIN
      TenantWebServiceOData.Init;
      TenantWebServiceOData.TenantWebServiceID := TenantWebService.RecordId;
      if not TenantWebServiceOData.Insert then;
      ODataUtility.GenerateSelectText(TenantWebService."Service Name",TenantWebService."Object Type",SelectText);
      TenantWebServiceOData.SetOdataSelectClause(SelectText);
      TenantWebServiceOData.Modify;
    END;

    [LineStart(455631)]
    LOCAL PROCEDURE CreatePowerBICustomerList@1087();
    VAR
      TenantWebService@1001 : Record "Tenant Web Service";
      Customer@1000 : Record Customer;
      DetailedCustLedgEntry@1003 : Record "Detailed Cust. Ledg. Entry";
      WebServiceManagement@1002 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Customer List",PowerBICustomerListTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBICustomerListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Customer.FieldNo("No."),DATABASE::Customer);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Customer.FieldNo(Name),DATABASE::Customer);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Customer.FieldNo("Credit Limit (LCY)"),DATABASE::Customer);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Customer.FieldNo("Balance Due"),DATABASE::Customer);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedCustLedgEntry.FieldNo("Posting Date"),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedCustLedgEntry.FieldNo("Cust. Ledger Entry No."),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedCustLedgEntry.FieldNo(Amount),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedCustLedgEntry.FieldNo("Amount (LCY)"),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedCustLedgEntry.FieldNo("Transaction No."),
        DATABASE::"Detailed Cust. Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedCustLedgEntry.FieldNo("Entry No."),
        DATABASE::"Detailed Cust. Ledg. Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455655)]
    LOCAL PROCEDURE CreatePowerBIVendorList@1086();
    VAR
      Vendor@1000 : Record Vendor;
      DetailedVendorLedgEntry@1001 : Record "Detailed Vendor Ledg. Entry";
      TenantWebService@1003 : Record "Tenant Web Service";
      WebServiceManagement@1002 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Vendor List",PowerBIVendorListTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIVendorListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Vendor.FieldNo("No."),DATABASE::Vendor);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Vendor.FieldNo(Name),DATABASE::Vendor);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Vendor.FieldNo("Balance Due"),DATABASE::Vendor);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedVendorLedgEntry.FieldNo("Posting Date"),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedVendorLedgEntry.FieldNo("Applied Vend. Ledger Entry No."),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedVendorLedgEntry.FieldNo(Amount),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedVendorLedgEntry.FieldNo("Amount (LCY)"),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedVendorLedgEntry.FieldNo("Transaction No."),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedVendorLedgEntry.FieldNo("Entry No."),
        DATABASE::"Detailed Vendor Ledg. Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,DetailedVendorLedgEntry.FieldNo("Remaining Pmt. Disc. Possible"),
        DATABASE::"Detailed Vendor Ledg. Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455680)]
    LOCAL PROCEDURE CreatePowerBIJobList@1085();
    VAR
      JobLedgerEntry@1000 : Record "Job Ledger Entry";
      TenantWebService@1001 : Record "Tenant Web Service";
      Job@1002 : Record Job;
      WebServiceManagement@1003 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Jobs List",PowerBIJobsListTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIJobsListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Job.FieldNo("No."),DATABASE::Job);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Job.FieldNo("Search Description"),DATABASE::Job);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Job.FieldNo(Complete),DATABASE::Job);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Job.FieldNo(Status),DATABASE::Job);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,JobLedgerEntry.FieldNo("Posting Date"),DATABASE::"Job Ledger Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,JobLedgerEntry.FieldNo("Total Cost"),DATABASE::"Job Ledger Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,JobLedgerEntry.FieldNo("Entry No."),DATABASE::"Job Ledger Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,JobLedgerEntry.FieldNo("Entry Type"),DATABASE::"Job Ledger Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455696)]
    LOCAL PROCEDURE CreatePowerBISalesList@1084();
    VAR
      SalesHeader@1001 : Record "Sales Header";
      SalesLine@1003 : Record "Sales Line";
      TenantWebService@1002 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Sales List",PowerBISalesListTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBISalesListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,SalesHeader.FieldNo("No."),DATABASE::"Sales Header");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,SalesHeader.FieldNo("Requested Delivery Date"),
        DATABASE::"Sales Header");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,SalesHeader.FieldNo("Shipment Date"),DATABASE::"Sales Header");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,SalesHeader.FieldNo("Due Date"),DATABASE::"Sales Header");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,SalesLine.FieldNo(Quantity),DATABASE::"Sales Line");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,SalesLine.FieldNo(Amount),DATABASE::"Sales Line");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,SalesLine.FieldNo("No."),DATABASE::"Sales Line");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,SalesLine.FieldNo(Description),DATABASE::"Sales Line");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455713)]
    LOCAL PROCEDURE CreatePowerBIPurchaseList@1083();
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
      PurchaseLine@1002 : Record "Purchase Line";
      TenantWebService@1003 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Purchase List",PowerBIPurchaseListTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIPurchaseListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,PurchaseHeader.FieldNo("No."),DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,PurchaseHeader.FieldNo("Order Date"),DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,PurchaseHeader.FieldNo("Expected Receipt Date"),
        DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,PurchaseHeader.FieldNo("Due Date"),DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,PurchaseHeader.FieldNo("Pmt. Discount Date"),
        DATABASE::"Purchase Header");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,PurchaseLine.FieldNo(Quantity),DATABASE::"Purchase Line");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,PurchaseLine.FieldNo(Amount),DATABASE::"Purchase Line");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,PurchaseLine.FieldNo("No."),DATABASE::"Purchase Line");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,PurchaseLine.FieldNo(Description),DATABASE::"Purchase Line");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455732)]
    LOCAL PROCEDURE CreatePowerBIItemPurchaseList@1082();
    VAR
      Item@1001 : Record Item;
      ItemLedgerEntry@1002 : Record "Item Ledger Entry";
      TenantWebService@1003 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Item Purchase List",PowerBIItemPurchasesListTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIItemPurchasesListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Item.FieldNo("No."),DATABASE::Item);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Item.FieldNo("Search Description"),DATABASE::Item);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,ItemLedgerEntry.FieldNo("Posting Date"),
        DATABASE::"Item Ledger Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,ItemLedgerEntry.FieldNo("Invoiced Quantity"),
        DATABASE::"Item Ledger Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,ItemLedgerEntry.FieldNo("Entry No."),DATABASE::"Item Ledger Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455747)]
    LOCAL PROCEDURE CreatePowerBIItemSalesList@1081();
    VAR
      Item@1001 : Record Item;
      ValueEntry@1002 : Record "Value Entry";
      TenantWebService@1003 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Item Sales List",PowerBIItemSalesListTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIItemSalesListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Item.FieldNo("No."),DATABASE::Item);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,Item.FieldNo("Search Description"),DATABASE::Item);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,ValueEntry.FieldNo("Posting Date"),DATABASE::"Value Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,ValueEntry.FieldNo("Invoiced Quantity"),DATABASE::"Value Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,ValueEntry.FieldNo("Entry No."),DATABASE::"Value Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455760)]
    LOCAL PROCEDURE CreatePowerBIGLAmountList@1080();
    VAR
      GLAccount@1002 : Record "G/L Account";
      GLEntry@1003 : Record "G/L Entry";
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI GL Amount List",PowerBIGLAmountListTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIGLAmountListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLAccount.FieldNo("No."),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLAccount.FieldNo(Name),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLAccount.FieldNo("Account Type"),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLAccount.FieldNo("Debit/Credit"),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLEntry.FieldNo("Posting Date"),DATABASE::"G/L Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLEntry.FieldNo(Amount),DATABASE::"G/L Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLEntry.FieldNo("Entry No."),DATABASE::"G/L Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455775)]
    LOCAL PROCEDURE CreatePowerBIGLBudgetedAmountList@1079();
    VAR
      GLAccount@1003 : Record "G/L Account";
      GLBudgetEntry@1002 : Record "G/L Budget Entry";
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI GL Budgeted Amount",PowerBIGLBudgetedAmountListTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIGLBudgetedAmountListTxt);
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLAccount.FieldNo("No."),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLAccount.FieldNo(Name),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLAccount.FieldNo("Account Type"),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLAccount.FieldNo("Debit/Credit"),DATABASE::"G/L Account");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLBudgetEntry.FieldNo(Date),DATABASE::"G/L Budget Entry");
      CreateTenantWebServiceColumn(TenantWebService.RecordId,GLBudgetEntry.FieldNo(Amount),DATABASE::"G/L Budget Entry");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455789)]
    LOCAL PROCEDURE CreatePowerBITopCustOverviewWebService@8();
    VAR
      CustLedgerEntry@1003 : Record "Cust. Ledger Entry";
      Customer@1002 : Record Customer;
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Top Cust. Overview",PowerBITopCustOverviewTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBITopCustOverviewTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Entry No."),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Posting Date"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Customer No."),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Sales (LCY)"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Customer.FieldNo(Name),
        DATABASE::Customer,metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455808)]
    LOCAL PROCEDURE CreatePowerBISalesHdrCustWebService@15();
    VAR
      SalesHeader@1003 : Record "Sales Header";
      SalesLine@1002 : Record "Sales Line";
      Item@1005 : Record Item;
      Customer@1006 : Record Customer;
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Sales Hdr. Cust.",PowerBISalesHdrCustTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBISalesHdrCustTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,SalesHeader.FieldNo("No."),DATABASE::"Sales Header",
        metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,SalesLine.FieldNo("No."),DATABASE::"Sales Line",
        metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,SalesLine.FieldNo(Quantity),
        DATABASE::"Sales Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,SalesLine.FieldNo("Qty. Invoiced (Base)"),
        DATABASE::"Sales Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,SalesLine.FieldNo("Qty. Shipped (Base)"),
        DATABASE::"Sales Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Item.FieldNo("Base Unit of Measure"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Item.FieldNo(Description),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Item.FieldNo(Inventory),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Item.FieldNo("Unit Price"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Customer.FieldNo("No."),
        DATABASE::Customer,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Customer.FieldNo(Name),
        DATABASE::Customer,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Customer.FieldNo(Balance),
        DATABASE::Customer,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Customer.FieldNo("Country/Region Code"),
        DATABASE::Customer,metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455843)]
    LOCAL PROCEDURE CreatePowerBICustItemLedgEntWebService@22();
    VAR
      Customer@1003 : Record Customer;
      ItemLedgerEntry@1002 : Record "Item Ledger Entry";
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Cust. Item Ledg. Ent.",PowerBICustItemLedgEntTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBICustItemLedgEntTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Customer.FieldNo("No."),
        DATABASE::Customer,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,ItemLedgerEntry.FieldNo("Item No."),
        DATABASE::"Item Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,ItemLedgerEntry.FieldNo(Quantity),
        DATABASE::"Item Ledger Entry",metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455858)]
    LOCAL PROCEDURE CreatePowerBICustLedgerEntriesWebService@27();
    VAR
      CustLedgerEntry@1003 : Record "Cust. Ledger Entry";
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Cust. Ledger Entries",PowerBICustLedgerEntriesTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBICustLedgerEntriesTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Entry No."),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Due Date"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Remaining Amt. (LCY)"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo(Open),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Customer Posting Group"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Sales (LCY)"),
        DATABASE::"Cust. Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,CustLedgerEntry.FieldNo("Posting Date"),
        DATABASE::"Cust. Ledger Entry",metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455881)]
    LOCAL PROCEDURE CreatePowerBIVendorLedgerEntriesWebService@30();
    VAR
      VendorLedgerEntry@1003 : Record "Vendor Ledger Entry";
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Vendor Ledger Entries",PowerBIVendorLedgerEntriesTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIVendorLedgerEntriesTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,VendorLedgerEntry.FieldNo("Entry No."),
        DATABASE::"Vendor Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,VendorLedgerEntry.FieldNo("Due Date"),
        DATABASE::"Vendor Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,VendorLedgerEntry.FieldNo("Remaining Amt. (LCY)"),
        DATABASE::"Vendor Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,VendorLedgerEntry.FieldNo(Open),
        DATABASE::"Vendor Ledger Entry",metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455898)]
    LOCAL PROCEDURE CreatePowerBIPurchaseHdrVendorWebService@11();
    VAR
      PurchaseHeader@1003 : Record "Purchase Header";
      PurchaseLine@1002 : Record "Purchase Line";
      Item@1005 : Record Item;
      Vendor@1006 : Record Vendor;
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Purchase Hdr. Vendor",PowerBIPurchaseHdrVendorTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIPurchaseHdrVendorTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,PurchaseHeader.FieldNo("No."),
        DATABASE::"Purchase Header",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,PurchaseLine.FieldNo("No."),
        DATABASE::"Purchase Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,PurchaseLine.FieldNo(Quantity),
        DATABASE::"Purchase Line",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Item.FieldNo("Base Unit of Measure"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Item.FieldNo(Description),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Item.FieldNo(Inventory),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Item.FieldNo("Qty. on Purch. Order"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Item.FieldNo("Unit Price"),
        DATABASE::Item,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Vendor.FieldNo("No."),
        DATABASE::Vendor,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Vendor.FieldNo(Name),
        DATABASE::Vendor,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Vendor.FieldNo(Balance),
        DATABASE::Vendor,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Vendor.FieldNo("Country/Region Code"),
        DATABASE::Vendor,metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455931)]
    LOCAL PROCEDURE CreatePowerBIVendItemLedgEntWebService@10();
    VAR
      Vendor@1003 : Record Vendor;
      ItemLedgerEntry@1002 : Record "Item Ledger Entry";
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1000 : Codeunit "Web Service Management";
      metaData@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Query,QUERY::"Power BI Vend. Item Ledg. Ent.",PowerBIVendItemLedgEntTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Query,PowerBIVendItemLedgEntTxt);
      ODataUtility.GetTenantWebServiceMetadata(TenantWebService,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,Vendor.FieldNo("No."),
        DATABASE::Vendor,metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,ItemLedgerEntry.FieldNo("Item No."),
        DATABASE::"Item Ledger Entry",metaData);
      ODataUtility.CreateTenantWebServiceColumnForQuery(TenantWebService.RecordId,ItemLedgerEntry.FieldNo(Quantity),
        DATABASE::"Item Ledger Entry",metaData);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455946)]
    LOCAL PROCEDURE CreatePowerBIAgedAccPayableWebService@42();
    VAR
      PowerBIChartBuffer@1002 : Record "Power BI Chart Buffer";
      TenantWebService@1000 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Aged Acc. Payable",PowerBIAgedAccPayableTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBIAgedAccPayableTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Period Type"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Date),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Date Sorting"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Period Type Sorting"),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455966)]
    LOCAL PROCEDURE CreatePowerBIAgedAccReceivableWebService@46();
    VAR
      PowerBIChartBuffer@1002 : Record "Power BI Chart Buffer";
      TenantWebService@1000 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Aged Acc. Receivable",PowerBIAgedAccReceivableTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBIAgedAccReceivableTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Date),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Date Sorting"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Period Type"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Period Type Sorting"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure Name"),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(455988)]
    LOCAL PROCEDURE CreatePowerBIAgedInventoryChartWebService@49();
    VAR
      PowerBIChartBuffer@1002 : Record "Power BI Chart Buffer";
      TenantWebService@1000 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Aged Inventory Chart",PowerBIAgedInventoryChartTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBIAgedInventoryChartTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Date),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Period Type"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Period Type Sorting"),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(456006)]
    LOCAL PROCEDURE CreatePowerBIJobActBudgPriceWebService@56();
    VAR
      PowerBIChartBuffer@1002 : Record "Power BI Chart Buffer";
      TenantWebService@1000 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Job Act. v. Budg. Price",PowerBIJobActBudgPriceTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBIJobActBudgPriceTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure No."),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Value),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(456020)]
    LOCAL PROCEDURE CreatePowerBIJobProfitabilityWebService@59();
    VAR
      PowerBIChartBuffer@1002 : Record "Power BI Chart Buffer";
      TenantWebService@1000 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Job Profitability",PowerBIJobProfitabilityTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBIJobProfitabilityTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure No."),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Value),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(456034)]
    LOCAL PROCEDURE CreatePowerBIJobActBudgCostWebService@61();
    VAR
      PowerBIChartBuffer@1002 : Record "Power BI Chart Buffer";
      TenantWebService@1000 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Job Act. v. Budg. Cost",PowerBIJobActBudgCostTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBIJobActBudgCostTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure No."),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Value),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(456048)]
    LOCAL PROCEDURE CreatePowerBISalesPipelineWebService@63();
    VAR
      PowerBIChartBuffer@1002 : Record "Power BI Chart Buffer";
      TenantWebService@1000 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Sales Pipeline",PowerBISalesPipelineTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBISalesPipelineTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Row No."),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure No."),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(456066)]
    LOCAL PROCEDURE CreatePowerBITop5OpportunitiesWebService@66();
    VAR
      PowerBIChartBuffer@1002 : Record "Power BI Chart Buffer";
      TenantWebService@1000 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Top 5 Opportunities",PowerBITop5OpportunitiesTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBITop5OpportunitiesTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(ID),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo(Value),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure Name"),
        DATABASE::"Power BI Chart Buffer");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIChartBuffer.FieldNo("Measure No."),
        DATABASE::"Power BI Chart Buffer");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(456082)]
    LOCAL PROCEDURE CreatePowerBIWorkDateCalcWebService@73();
    VAR
      TenantWebService@1000 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI WorkDate Calc.",PowerBIWorkDateCalcTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBIWorkDateCalcTxt);

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [LineStart(456090)]
    LOCAL PROCEDURE CreatePowerBIReportLabelsWebService@13();
    VAR
      PowerBIReportLabels@1000 : Record "Power BI Report Labels";
      TenantWebService@1001 : Record "Tenant Web Service";
      WebServiceManagement@1002 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"PBI Report Labels",PowerBIReportLabelsTxt,true);

      TenantWebService.Get(TenantWebService."Object Type"::Page,PowerBIReportLabelsTxt);
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIReportLabels.FieldNo("Label ID"),
        DATABASE::"Power BI Report Labels");
      ODataUtility.CreateTenantWebServiceColumnForPage(TenantWebService.RecordId,PowerBIReportLabels.FieldNo("Text Value"),
        DATABASE::"Power BI Report Labels");

      CreateTenantWebServiceOData(TenantWebService);
    END;

    [UpgradePerCompany]
    [LineStart(456102)]
    PROCEDURE UpdateContactDuplicateSearchString@1111();
    VAR
      ContDuplicateSearchString@1000 : Record "Cont. Duplicate Search String";
    BEGIN
      ContDuplicateSearchString.DeleteAll;
    END;

    [UpgradePerCompany]
    [LineStart(456105)]
    PROCEDURE UpgradeBankAccReconciliation@7();
    VAR
      BankAccReconciliation@1000 : Record "Bank Acc. Reconciliation";
    BEGIN
      BankAccReconciliation.ModifyAll("Copy VAT Setup to Jnl. Line",true,true);
    END;

    [LineStart(456108)]
    LOCAL PROCEDURE UpdateItemCategoryCodeOnLinesRecords@1(VAR UPGItem@1000 : Record "UPG Item";VAR ItemCategory@1001 : Record "Item Category");
    VAR
      SalesShipmentLine@1002 : Record "Sales Shipment Line";
      SalesInvoiceLine@1003 : Record "Sales Invoice Line";
      SalesCrMemoLine@1004 : Record "Sales Cr.Memo Line";
      PurchRcptLine@1005 : Record "Purch. Rcpt. Line";
      PurchInvLine@1006 : Record "Purch. Inv. Line";
      RequisitionLine@1007 : Record "Requisition Line";
      ItemLedgerEntry@1008 : Record "Item Ledger Entry";
      SalesLine@1009 : Record "Sales Line";
      PurchaseLine@1010 : Record "Purchase Line";
      SalesLineArchive@1011 : Record "Sales Line Archive";
      PurchaseLineArchive@1012 : Record "Purchase Line Archive";
      TransferLine@1013 : Record "Transfer Line";
      TransferShipmentLine@1014 : Record "Transfer Shipment Line";
      TransferReceiptLine@1015 : Record "Transfer Receipt Line";
      ServiceLine@1016 : Record "Service Line";
      ServiceShipmentLine@1017 : Record "Service Shipment Line";
      ServiceInvoiceLine@1018 : Record "Service Invoice Line";
      ServiceCrMemoLine@1019 : Record "Service Cr.Memo Line";
      ReturnShipmentLine@1020 : Record "Return Shipment Line";
      ReturnReceiptLine@1021 : Record "Return Receipt Line";
      StandardItemJournalLine@1022 : Record "Standard Item Journal Line";
      ItemJournalLine@1023 : Record "Item Journal Line";
    BEGIN
      SalesShipmentLine.SetRange(Type,SalesShipmentLine.Type::Item);
      SalesShipmentLine.SetRange("No.",UPGItem."No.");
      SalesShipmentLine.ModifyAll("Item Category Code",ItemCategory.Code);

      SalesInvoiceLine.SetRange(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.SetRange("No.",UPGItem."No.");
      SalesInvoiceLine.ModifyAll("Item Category Code",ItemCategory.Code);

      SalesCrMemoLine.SetRange(Type,SalesCrMemoLine.Type::Item);
      SalesCrMemoLine.SetRange("No.",UPGItem."No.");
      SalesCrMemoLine.ModifyAll("Item Category Code",ItemCategory.Code);

      PurchRcptLine.SetRange(Type,PurchRcptLine.Type::Item);
      PurchRcptLine.SetRange("No.",UPGItem."No.");
      PurchRcptLine.ModifyAll("Item Category Code",ItemCategory.Code);

      PurchInvLine.SetRange(Type,PurchInvLine.Type::Item);
      PurchInvLine.SetRange("No.",UPGItem."No.");
      PurchInvLine.ModifyAll("Item Category Code",ItemCategory.Code);

      RequisitionLine.SetRange(Type,RequisitionLine.Type::Item);
      RequisitionLine.SetRange("No.",UPGItem."No.");
      RequisitionLine.ModifyAll("Item Category Code",ItemCategory.Code);

      ItemLedgerEntry.SetRange("Item No.",UPGItem."No.");
      ItemLedgerEntry.ModifyAll("Item Category Code",ItemCategory.Code);

      SalesLine.SetRange(Type,SalesLine.Type::Item);
      SalesLine.SetRange("No.",UPGItem."No.");
      SalesLine.ModifyAll("Item Category Code",ItemCategory.Code);

      PurchaseLine.SetRange(Type,PurchaseLine.Type::Item);
      PurchaseLine.SetRange("No.",UPGItem."No.");
      PurchaseLine.ModifyAll("Item Category Code",ItemCategory.Code);

      SalesLineArchive.SetRange(Type,SalesLineArchive.Type::Item);
      SalesLineArchive.SetRange("No.",UPGItem."No.");
      SalesLineArchive.ModifyAll("Item Category Code",ItemCategory.Code);

      PurchaseLineArchive.SetRange(Type,PurchaseLineArchive.Type::Item);
      PurchaseLineArchive.SetRange("No.",UPGItem."No.");
      PurchaseLineArchive.ModifyAll("Item Category Code",ItemCategory.Code);

      TransferLine.SetRange("Item No.",UPGItem."No.");
      TransferLine.ModifyAll("Item Category Code",ItemCategory.Code);

      TransferShipmentLine.SetRange("Item No.",UPGItem."No.");
      TransferShipmentLine.ModifyAll("Item Category Code",ItemCategory.Code);

      TransferReceiptLine.SetRange("Item No.",UPGItem."No.");
      TransferReceiptLine.ModifyAll("Item Category Code",ItemCategory.Code);

      ServiceLine.SetRange(Type,ServiceLine.Type::Item);
      ServiceLine.SetRange("No.",UPGItem."No.");
      ServiceLine.ModifyAll("Item Category Code",ItemCategory.Code);

      ServiceShipmentLine.SetRange(Type,ServiceShipmentLine.Type::Item);
      ServiceShipmentLine.SetRange("No.",UPGItem."No.");
      ServiceShipmentLine.ModifyAll("Item Category Code",ItemCategory.Code);

      ServiceInvoiceLine.SetRange(Type,ServiceInvoiceLine.Type::Item);
      ServiceInvoiceLine.SetRange("No.",UPGItem."No.");
      ServiceInvoiceLine.ModifyAll("Item Category Code",ItemCategory.Code);

      ServiceCrMemoLine.SetRange(Type,ServiceCrMemoLine.Type::Item);
      ServiceCrMemoLine.SetRange("No.",UPGItem."No.");
      ServiceCrMemoLine.ModifyAll("Item Category Code",ItemCategory.Code);

      ReturnShipmentLine.SetRange(Type,ReturnShipmentLine.Type::Item);
      ReturnShipmentLine.SetRange("No.",UPGItem."No.");
      ReturnShipmentLine.ModifyAll("Item Category Code",ItemCategory.Code);

      ReturnReceiptLine.SetRange(Type,ReturnReceiptLine.Type::Item);
      ReturnReceiptLine.SetRange("No.",UPGItem."No.");
      ReturnReceiptLine.ModifyAll("Item Category Code",ItemCategory.Code);

      StandardItemJournalLine.SetRange("Item No.",UPGItem."No.");
      StandardItemJournalLine.ModifyAll("Item Category Code",ItemCategory.Code);

      ItemJournalLine.SetRange("Item No.",UPGItem."No.");
      ItemJournalLine.ModifyAll("Item Category Code",ItemCategory.Code);
    END;

    [UpgradePerDatabase]
    [LineStart(456191)]
    PROCEDURE CreateWorkflowWebhookWebServices@2();
    VAR
      TenantWebService@1002 : Record "Tenant Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Sales Document Entity",'salesDocuments',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Sales Document Line Entity",'salesDocumentLines',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Purchase Document Entity",'purchaseDocuments',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Purchase Document Line Entity",'purchaseDocumentLines',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Sales Document Entity",'workflowSalesDocuments',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Sales Document Line Entity",'workflowSalesDocumentLines',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Purchase Document Entity",'workflowPurchaseDocuments',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Purchase Document Line Entity",'workflowPurchaseDocumentLines',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Gen. Journal Batch Entity",'workflowGenJournalBatches',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Gen. Journal Line Entity",'workflowGenJournalLines',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Workflow - Customer Entity",'workflowCustomers',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Workflow - Item Entity",'workflowItems',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Workflow - Vendor Entity",'workflowVendors',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Page,PAGE::"Workflow Webhook Subscriptions",'workflowWebhookSubscriptions',true);
      WebServiceManagement.CreateTenantWebService(
        TenantWebService."Object Type"::Codeunit,CODEUNIT::"Workflow Webhook Subscription",'WorkflowActionResponse',true);
    END;

    [UpgradePerDatabase]
    [LineStart(456223)]
    PROCEDURE CreateExcelTemplateWebServices@3();
    BEGIN
      CreateExcelTemplateWebService(ExcelTemplateIncomeStatementTxt,PAGE::"Income Statement Entity");
      CreateExcelTemplateWebService(ExcelTemplateBalanceSheetTxt,PAGE::"Balance Sheet Entity");
      CreateExcelTemplateWebService(ExcelTemplateTrialBalanceTxt,PAGE::"Trial Balance Entity");
      CreateExcelTemplateWebService(ExcelTemplateRetainedEarningsStatementTxt ,PAGE::"Retained Earnings Entity");
      CreateExcelTemplateWebService(ExcelTemplateCashFlowStatementTxt ,PAGE::"Cash Flow Statement Entity");
      CreateExcelTemplateWebService(ExcelTemplateAgedAccountsReceivableTxt ,PAGE::"Aged AR Entity");
      CreateExcelTemplateWebService(ExcelTemplateAgedAccountsPayableTxt ,PAGE::"Aged AP Entity");
      CreateExcelTemplateWebService(ExcelTemplateCompanyInformationTxt ,PAGE::ExcelTemplateCompanyInfo);
    END;

    [LineStart(456233)]
    LOCAL PROCEDURE CreateExcelTemplateWebService@4(ObjectName@1001 : Text;PageID@1000 : Integer);
    VAR
      TenantWebService@1003 : Record "Tenant Web Service";
    BEGIN
      Clear(TenantWebService);
      WebServiceManagement.CreateTenantWebService(TenantWebService."Object Type"::Page,PageID,ObjectName,true);
    END;

    [UpgradePerCompany]
    [LineStart(456237)]
    PROCEDURE UpgradeReportSelections@5();
    VAR
      ReportSelections@1000 : Record "Report Selections";
    BEGIN
      with ReportSelections do begin
        if not Get(Usage::"Pro Forma S. Invoice",'1') then
          InsertReportSelections(Usage::"Pro Forma S. Invoice",'1',REPORT::"Standard Sales - Pro Forma Inv");
        if not Get(Usage::"S.Arch.Blanket",'1') then
          InsertReportSelections(Usage::"S.Arch.Blanket",'1',REPORT::"Archived Blanket Sales Order");
        if not Get(Usage::"P.Arch.Blanket",'1') then
          InsertReportSelections(Usage::"P.Arch.Blanket",'1',REPORT::"Archived Blanket Purch. Order");
      end;
    END;

    [LineStart(456247)]
    LOCAL PROCEDURE InsertReportSelections@6(ReportUsage@1000 : Integer;ReportSequence@1001 : Code[10];ReportID@1002 : Integer);
    VAR
      ReportSelections@1003 : Record "Report Selections";
    BEGIN
      with ReportSelections do begin
        Init;
        Usage := ReportUsage;
        Sequence := ReportSequence;
        "Report ID" := ReportID;
        Insert;
      end;
    END;

    [UpgradePerCompany]
    [LineStart(456256)]
    PROCEDURE UpgradeSalesSetup@75();
    VAR
      SalesReceivablesSetup@1000 : Record "Sales & Receivables Setup";
    BEGIN
      if SalesReceivablesSetup.Get then begin
        SalesReceivablesSetup."Archive Orders" := SalesReceivablesSetup."Archive Quotes and Orders";
        if SalesReceivablesSetup."Archive Quotes and Orders" then
          SalesReceivablesSetup."Archive Quotes" := SalesReceivablesSetup."Archive Quotes"::Always;
        SalesReceivablesSetup.Modify;
      end;
    END;

    [UpgradePerCompany]
    [LineStart(456264)]
    PROCEDURE UpgradePurchSetup@76();
    VAR
      PurchPayablesSetup@1000 : Record "Purchases & Payables Setup";
    BEGIN
      if PurchPayablesSetup.Get then begin
        PurchPayablesSetup."Archive Orders" := PurchPayablesSetup."Archive Quotes and Orders";
        if PurchPayablesSetup."Archive Quotes and Orders" then
          PurchPayablesSetup."Archive Quotes" := PurchPayablesSetup."Archive Quotes"::Always;
        PurchPayablesSetup.Modify;
      end;
    END;

    [UpgradePerCompany]
    [LineStart(456272)]
    PROCEDURE UpgradeCRMConnectionString@9();
    VAR
      CRMConnectionSetup@1000 : Record "CRM Connection Setup";
    BEGIN
      if CRMConnectionSetup.Get then
        CRMConnectionSetup.SetConnectionString(CRMConnectionSetup."Connection String");
    END;

    [UpgradePerCompany]
    [LineStart(456276)]
    PROCEDURE UpdateVATRateChangeSetup@12();
    VAR
      VATRateChangeSetup@1000 : Record "VAT Rate Change Setup";
    BEGIN
      if VATRateChangeSetup.Get then begin
        VATRateChangeSetup."Ignore Status on Service Docs." := true;
        VATRateChangeSetup.Modify;
      end;
    END;

    [UpgradePerCompany]
    [LineStart(456282)]
    PROCEDURE UpdateIntrastatContactSetup@77();
    VAR
      UPGCompanyInformation@1000 : Record "UPG Company Information";
      IntrastatSetup@1001 : Record "Intrastat Setup";
    BEGIN
      if UPGCompanyInformation.Get then
        if UPGCompanyInformation."Intrastat Contact No." <> '' then begin
          if not IntrastatSetup.Get then
            IntrastatSetup.Insert;
          IntrastatSetup."Intrastat Contact Type" := UPGCompanyInformation."Intrastat Contact Type";
          IntrastatSetup."Intrastat Contact No." := UPGCompanyInformation."Intrastat Contact No.";
          IntrastatSetup.Modify;
        end;
    END;

    [UpgradePerCompany]
    [LineStart(456292)]
    PROCEDURE UpdateCheckFieldSetup@101010();
    VAR
      IntrastatJnlLine@1001 : Record "Intrastat Jnl. Line";
      IntraJnlManagement@1000 : Codeunit IntraJnlManagement;
    BEGIN
      IntraJnlManagement.CreateDefaultAdvancedIntrastatSetup;
      InsertCheckFieldSetup(IntrastatJnlLine.FieldNo("Tariff No."));
      InsertCheckFieldSetup(IntrastatJnlLine.FieldNo("Country/Region Code"));
      InsertCheckFieldSetup(IntrastatJnlLine.FieldNo("Transaction Type"));
      InsertCheckFieldSetup(IntrastatJnlLine.FieldNo("Total Weight"));
      InsertCheckFieldSetup(IntrastatJnlLine.FieldNo(Quantity));
    END;

    [LineStart(456300)]
    LOCAL PROCEDURE InsertCheckFieldSetup@2323(FieldNumber@1001 : Integer);
    VAR
      IntrastatCheckFieldSetup@1002 : Record "Intrastat Checklist Setup";
    BEGIN
      with IntrastatCheckFieldSetup do begin
        Init;
        Validate("Field No.",FieldNumber);
        if Insert then;
      end;
    END;

    [LineStart(456307)]
    LOCAL PROCEDURE UpdateBlockedFields@201();
    VAR
      Item@1000 : Record Item;
    BEGIN
      if Item.FindSet(true,false) then
        repeat
          Item.Validate("Sales Blocked",false);
          Item.Validate("Purchasing Blocked",false);
          if Item.Modify then;
        until Item.Next = 0;
    END;

    [UpgradePerCompany]
    [LineStart(456315)]
    PROCEDURE UpdateJobs@100();
    VAR
      Job@1000 : Record Job;
      UpgradeTagMgt@1001 : Codeunit "Upgrade Tag Mgt";
      UpgradeTags@1003 : Codeunit "Upgrade Tags";
      IntegrationManagement@1004 : Codeunit "Integration Management";
      RecordRef@1002 : RecordRef;
    BEGIN
      if UpgradeTagMgt.HasUpgradeTag(UpgradeTags.GetAddingIDToJobsUpgradeTag) then
        exit;
      if Job.FindSet(true,false) then
        repeat
          if IsNullGuid(Job.Id) then begin
            RecordRef.GetTable(Job);
            IntegrationManagement.InsertUpdateIntegrationRecord(RecordRef,CurrentDateTime);
            RecordRef.SetTable(Job);
            Job.Modify;
            Job.UpdateReferencedIds;
          end;
        until Job.Next = 0;
      UpgradeTagMgt.SetUpgradeTag(UpgradeTags.GetAddingIDToJobsUpgradeTag);
    END;

    [UpgradePerCompany]
    [LineStart(456330)]
    PROCEDURE UpgradeVATReportSetup@37();
    VAR
      VATReportSetup@1000 : Record "VAT Report Setup";
      UpgradeTagMgt@1002 : Codeunit "Upgrade Tag Mgt";
      UpgradeTags@1003 : Codeunit "Upgrade Tags";
      DateFormulaText@1001 : Text;
    BEGIN
      if UpgradeTagMgt.HasUpgradeTag(UpgradeTags.GetVATRepSetupPeriodRemCalcUpgradeTag) then
        exit;

      with VATReportSetup do begin
        if not Get then
          exit;
        if IsPeriodReminderCalculation or ("Period Reminder Time" = 0) then
          exit;

        DateFormulaText := StrSubstNo('<%1D>',"Period Reminder Time");
        Evaluate("Period Reminder Calculation",DateFormulaText);
        "Period Reminder Time" := 0;

        if Modify then;
      end;

      UpgradeTagMgt.SetUpgradeTag(UpgradeTags.GetVATRepSetupPeriodRemCalcUpgradeTag);
    END;

    BEGIN
    END.
  }
}

